@ngdoc overview
@name FAQ
@description

#FAQ

## 質問一覧

### なぜこのプロジェクトは"AngularJS"というのですか？なぜ名前空間は"ng"と呼ぶのですか？

HTMLには山括弧(Angular brackets)があるし、"ng"は"Angular"らしく聞こえるからです。


### AngularJSはライブラリーですか、フレームワークですか、プラグインですか、ブラウザの拡張機能ですか？

AngularJSはフレームワークの定義が一番馴染みますが、標準的なフレームワークよりもずっと軽量であり、
それゆえ多くの人がそれをライブラリーと混同します。

AngularJSは100％JavaScriptで書かれており、100％クライアントサイドでありデスクトップとモバイルブラウザーで互換性があります。
ですからそれはもちろんプラグインでもその他のなんらかのブラウザのネイティブ拡張機能でもありません。


### AngularJSはテンプレートシステムなのですか?

最も高いレベルでは、Angularは確かに単なる新たなテンプレートシステムのように見えます。しかしAngularJSは
一つの重要な理由により異なっており、それがAngularJSをアプリケーション開発にとても適したものにしています。
双方向データバインディングです。テンプレートはブラウザでコンパイルされ、そのコンパイルステップは生きたviewを
もたらします。これはあなた方開発者は、他のテンプレートシステムの使用時のようなviewとmodelを常時同期させる
コードを書く必要がないということです。


### AngularJSにセキュリティホールがあるか心配する必要はありますか？

他のどんなテクノロジーとも同じように、AngularJSも攻撃に対し鉄壁というわけではありません。Angularは、
しかしながら、クロスサイトスクリプティングやHTMLインジェクション攻撃を含む基本的なセキュリティホールに対する
組み込みの対策を提供します。強調しますが、AngularJSは開発者のためにすべての文字列に対し往復エスケープしますし、
サーバーサイド通信のためにXSRF対策さえも提供します。

AngularJSは、他のセキュリティ対策、例えばコンテンツセキュリティポリシー (CSP)、HTTPS (SSL/TLS)、
そしてサーバーサイドの認証と証明書といった、有りうる攻撃経路を大いに減らすためのもの両立するように設計されました。
我々はそれらを利用することを強くおすすめします。


### ソースコードをダウンロードし、ビルドし、ローカルでAngularJSの環境をホストできますか？

はい。こちらの説明をご覧ください。{@link downloading}.



### どのブラウザーで動作しますか？

以下のブラウザーで広範囲のテストを実施しています。：　Safari, Chrome, Firefox, Opera,
IE8, IE9 そしてモバイルブラウザー (Android, Chrome Mobile, iOS Safari)。


### Angularのパフォーマンスはどのようなものですか？

起動時間はネットワーク、キャッシュの状態、使用するブラウザー、そしてハードウェアに大きく依存しますが、
典型的には我々は起動時間を数十から数百ミリ秒以内と測定しています。

実行速度はバックエンドの速度（データのフェッチ）によるのはもちろん、ページにおけるバインディングの数と複雑さに
よっても変動します。実例をあげるため、我々はいつものように何百何千もの活発なバインディングを行うしゃれたアプリを作りました。


### angular.jsで入れる必要があるファイルはどのくらい大きいのでしょうか？

ファイルサイズは圧縮してminifyしたもので29KB以下です。


### オープンソースのClosureライブラリーをAngularと共に利用できますか？

はい、{@link http://code.google.com/closure/library Closure Library} からAngularのwidgetを利用できます。


### AngularはjQueryライブラリーを利用しますか？

はい、Angularはアプリケーションの起動時に {@link http://jquery.com/ jQuery} が存在する場合、それを利用します。
jQueryがscript pathに存在しない場合、Angularは {@link api/angular.element  jQLite} と我々が呼ぶ、jQueryの
サブセットとなるAngularの独自実装にフォールバックします。


### Angularのテスタビリティーとはどのようなものですか？

とてもテストしやすいですし、その方法を一から設計しています。統合された依存性注入フレームワークがありますし、
多くの重い依存性（サーバーサイドとの通信のような）のためにモックを提供しています。
詳しくは {@link api/ng service} をご覧ください。


### Angularもっと学ぶにはどうしたらいいでしょうか？

2012年7月17日の講義を御覧ください。
"{@link http://www.youtube.com/watch?v=1CpiB3Wk25U AngularJS Intro + Dependency Injection}".


### Angularのライセンスは何でしょうか？
　
MITライセンスです。


### Angularのロゴのアートワークをダウンロードして使ってもいいでしょうか？

はい！こちらのgithubリポジトリにデザインファイルがあります。"{@link https://github.com/angular/angular.js/tree/master/images/logo 
angular.js/images/logo}"
ロゴデザインのライセンスは"{@link http://creativecommons.org/licenses/by-sa/3.0/ Creative Commons Attribution-ShareAlike 3.0 Unported License}"です。
もし何か他の用途を考えているならば、我々にお問い合わせください。

### AngularJSの販促グッズが欲しいです。

我々がプレゼンをするイベントにはよく少量のTシャツとステッカーを持っていきます。もしあなたが自分用に注文したければ、我々の販促グッズを作る方々が
喜んで、既存のひな形に基づいた特別注文に対応いたします。保有しているデザインを使うことにより設定コストを無くしますので、あなたは必要なだけどんな数量でも注文できます。

**ステッカー**
Tom Witting（または営業のどなたか）の tom@stickergiant.com までご連絡ください。そしてAngularJSのステッカーを注文したい旨お伝えください。(just like the ones in job #42711)
お支払いと配送の情報をお伝え下さい。

デザインが同じである限り、{@link http://www.stickergiant.com StickerGiant} は再注文割引がご利用になれます。

**Tシャツ**
営業{@link http://www.customink.com www.customink.com}までご連絡ください。そして過去の注文番号#2106371のように、"angularjs"のTシャツを注文したい旨お伝え下さい。
お支払いと配送の情報をお伝え下さい。

デザインが同じである限り、CustomInkはいかなる初期料金も請求しませんし、再注文割引をご利用になれます。


## よくある落とし穴

Angularのサポートチャンネル(#angularjs on Freenode) では、多くのAngular初心者が繰り返し陥りがちな落とし穴が見られます。
このドキュメントは、あなたがそれらに苦労する前に説明することが目的です。

### DOM操作

controllerにおいてDOMを変更するのにjQueryを使うのをやめましょう。本当に。
elementを追加したり削除したり、それらのコンテンツの取得したり表示したり隠したりすることを含みます。
DOM操作には、ビルトインされたdirectiveを使うか、または必要になればあなた独自のdirectiveを書いてください。
以下の重複した機能についてをご覧ください。

もしあなたがそういった癖から抜け出すのに苦労しているなら、あなたのアプリからjQueryを削除することを検討してください。本当に。
Angularには$http serviceとパワフルなdirectiveがあるので、ほとんどの場合jQueryを使わなくとも大丈夫です。
AngularにバンドルされたjQliteはAngularのdirective、特にeventのバインディングを書くのに最も頻繁に使われる一握りの機能を持っています。


### 既にある機能を再現しようとしてしまうこと

あなたのアプリはある機能を必要とする最初のアプリではない可能性が十分あります。
古い癖から抜け出すようにAngularにおいて再実装された特別な機能がいくつかあります。

**ng-repeat**

`ng-repeat` はとても頻繁に使います。
よく、サーバーからフェッチした多量のelementをcontainerに追加するためにjQueryを使おうとする人がいます。
良くないことです。
`ng-repeat`はこの用途のためのものです。とてもうまくやってくれますよ。
サーバーからのデータを`$scope`に配列で入れて、`ng-repeat`でDOMにバインドしてください。

**ng-show**

`ng-show`も頻繁に使います。
jQueryを使って、条件によって要素を表示したり隠したりするのはよくあるパターンですが、Angularではより良い方法があります。
`ng-show` (及び `ng-hide`)　は真偽値表現にもとづいて条件によって要素を表示したり隠したりします。
`$scope`変数に関して、要素を表示したり隠したりする条件を説明します。

	<div ng-show="!loggedIn">Click <a href="#/login">here</a> to log in</div>

同様に`ng-hide` と、それとよく似た `ng-disabled`も覚えておいてください。
特に、いくつかの相互排他的な`ng-show`があるときに代わりに使うべき、パワフルな`ng-switch`も覚えておいてください。

**ng-class**

`ng-class`はこれら3つの最後の大物です。
条件によってclassをelementに適用することもまた頻繁にjQueryを使って手動でなされされます。
Angularでは、もちろん、より良い方法があります。
`ng-class`にwhitespace-separatedなクラス名のsetを設定することができ、そして普通の`class`と同じ働きをします。
あまりおもしろくはないですね。では、もう一つの文法をお見せします。

    <div ng-class="{ errorClass: isError, warningClass: isWarning, okClass: !isError && !isWarning }">...</div>

`ng-class`に、keyがCSSクラス名で、valueが`$scope`変数を使った条件表現のオブジェクトを設定しています。
elementは条件がtrueであるすべてのクラスを持ち、falseであるものは持ちません。

便利な`ng-class-even` と `ng-class-odd`、そして関連していますがいくぶん異なる`ng-style`も覚えておいてください。


### `$watch` と `$apply`

双方向データバインディングはAngularの凄さの根源です。
しかしながら、それは魔法ではありませんし、いくつかの状況では、正しい方向にやさしく導いてやる必要があります。

Angularで`ng-model`、 `ng-repeat`その他を使って値をelementにバインドするとき、Angularはその値に`$watch`を作ります。
そして、scopeの値が変わった時には、そのelementを監視するすべての`$watch`が実行され、全てが更新されます。

時々、普通はあなたがカスタムdirectiveを書いているときに、scopeの値の`$watch`においてそのdirectiveが変更に反応するように、
独自の`$watch`を定義する必要があるでしょう。

その反面、時々いくつかのコードでscopeの値を変更したのにアプリがそれに反応しないことがあります。
Angularはコードの実行終了後、scope変数の変更をチェックします。例えば、`ng-click`がscopeの関数をコールするとき、
Angularは変更をチェックし反応します。
しかしながら、いくつかのコードはAngularの外部にあり、更新を引き起こすには`scope.$apply()`をコールする必要があるでしょう。
これはカスタムdirectiveにてもっとも頻繁に見られます。

### `ng-repeat`と他のdirectiveを混ぜる

`ng-repeat`は極めて役に立ちます。Angularでもっともパワフルなdirectiveの一つです。
しかしながら、それがDOMに適用する変化は相当なものです。
したがって他のdirective(`ng-show`や`ng-controller`など)を`ng-repeat`と同じelementに適用することは、大抵は問題を引き起こします。

もしあなたがrepeat全体に対してdirectiveを適用したいならば、そのrepeatを親elementでラップして置いてください。
もしあなたがrepeatの中の一つ一つにdirectiveを適用したいならば、それを`ng-repeat`のelementの子elementに置いてください。

### `$rootScope` はあるがが、それは邪悪な使用をされ得る

Angularのscopeはツリートップのroot scopeからのプロトタイプ継承の体系を形成します。
通常これは無視して構いません。なぜならば大部分のviewはcontrollerを持ち、それゆえそれら独自のscopeを持つからです。

時折、アプリ全体でグローバルにしたいデータがあります。
これらのデータのため、`$rootScope`を注入し他のscopeと同じように値をセットする事ができます。
scopeはroot scopeから継承されるため、ローカルな`$scope`と同じように、これらの値は`ng-show`のようなdirectiveに付加されたexpressionで利用可能になります。

もちろん、globalな状態は酷いものであるので、`$rootScope`の使用は慎重にするべきです。あなたが（願わくば）他の言語でgrobal変数を扱うのと同様に。
Of course, global state sucks and you should use `$rootScope` sparingly, like you would (hopefully) use with global variables in any language.
特に、コードのために使ってはいけません。データのためだけに留めてください。
もしあなたが`$rootScope`に関数を置く誘惑にかられたならば、それはほとんど常にserviceに置くほうがいいでしょう。 serviceは必要なときに注入できますし、テストがより簡単です。

逆に、少しのデータを出し入れするためだけのserviceを作らないでください。
