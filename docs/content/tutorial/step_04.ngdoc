@ngdoc overview
@name Tutorial: 4 - 双方向データバインディング
@description

<ul doc-tutorial-nav="4"></ul>


このステップでは、ユーザーがスマートフォンリスト内のアイテムの並びをコントロールできるようにします。動的な並び替えは、新しいモデルプロパティを作ってリピーターと繋ぎ、あとはデータバインディングの魔法に任せることで実装します。


<div doc-tutorial-reset="4"></div>


検索ボックスに加え、スマートフォンの並びをユーザーがコントロールするためのドロップダウンメニューが表示されているはずです。

ステップ３と４の主な変更点は以下に挙げます。完全な差分は{@link https://github.com/angular/angular-phonecat/compare/step-3...step-4 GitHub}で見ることができます：


## テンプレート

__`app/index.html`:__
<pre>
  Search: <input ng-model="query">
  Sort by:
  <select ng-model="orderProp">
    <option value="name">Alphabetical</option>
    <option value="age">Newest</option>
  </select>


  <ul class="phones">
    <li ng-repeat="phone in phones | filter:query | orderBy:orderProp">
      {{phone.name}}
      <p>{{phone.snippet}}</p>
    </li>
  </ul>
</pre>

次のような変更を`index.html`テンプレートに加えました：

* まず始めに、`orderProp`と名付けられたhtml要素`<select>`を追加しました。予め用意された２つのソート順からユーザーが選択できるようにするためです。

      <img  class="diagram" src="img/tutorial/tutorial_04.png">

* 続いて`filter`フィルターと{@link api/ng.filter:orderBy `orderBy`}フィルターを繋ぎ、リピーターに対する入力を更に処理をできるようにしました。`orderBy`は入力として配列を受け取り、そのコピーを並び替えてから返すフィルターです。

Angularはselect要素と`orderProp`モデルとの間に双方向のデータバインディングを作り出します。`orderProp`はさらに`orderBy`フィルターへの入力として使われます。

ステップ３のデータバインディングとリピーターについての節で説明したとおり、モデルが変化すればいつでも（例えばユーザーがドロップダウンメニューで並び順を変更したことによって）、Angularのデータバインディングはビューを自動的に更新させます。大量のDOM操作のコードは一切必要ありません！



## コントローラー

__`app/js/controllers.js`:__
<pre>
function PhoneListCtrl($scope) {
  $scope.phones = [
    {"name": "Nexus S",
     "snippet": "Fast just got faster with Nexus S.",
     "age": 0},
    {"name": "Motorola XOOM™ with Wi-Fi",
     "snippet": "The Next, Next Generation tablet.",
     "age": 1},
    {"name": "MOTOROLA XOOM™",
     "snippet": "The Next, Next Generation tablet.",
     "age": 2}
  ];

  $scope.orderProp = 'age';
}
</pre>

* `phones`モデル（スマートフォンの配列）を変更して、各スマートフォンのレコードに`age`プロパティを追加しました。この属性はスマートフォンを年数で並び替えるために使われます。

* `orderProp`のデフォルト値を`age`に設定するための１行をコントローラーに加えました。ここでデフォルト値を設定しなかった場合、ユーザーがドロップダウンメニューからオプションを選択するまでモデルは未初期化のままになるでしょう。

  これは双方向データバインディングについて説明するいい機会です。アプリがブラウザの中に読み込まれた時、ドロップダウンメニューでは"Newest"が選ばれています。これはコントローラーの中で`orderProp`を`'age'`に設定したためです。これによってモデルからUIの方向へのバインディングが機能します。さて、ここでもしドロップダウンメニューから"Alphabetically"を選ぶと、モデルも同様に更新されてスマートフォンは並び替えられます。これがデータバインディングのする逆方向（UIからモデル）の仕事です。



## テスト

加えた変更はユニットテストとエンドツーエンドのテストの両方で確認されるべきです。まず始めにユニットテストの方を見てみましょう。

__`test/unit/controllersSpec.js`:__
<pre>
describe('PhoneCat controllers', function() {

  describe('PhoneListCtrl', function(){
    var scope, ctrl;

    beforeEach(function() {
      scope = {},
      ctrl = new PhoneListCtrl(scope);
    });


    it('should create "phones" model with 3 phones', function() {
      expect(scope.phones.length).toBe(3);
    });


    it('should set the default value of orderProp model', function() {
      expect(scope.orderProp).toBe('age');
    });
  });
});
</pre>


このユニットテストはデフォルトの並び順プロパティが設定されていることを確認しています。

JasmineのAPIを使って`beforeEach`ブロックにコントローラーの生成コードを入れました。このブロックは親の`describe`ブロックの全てのテストで共有されます。

次の出力をTestacularのタブで確認できるはずです：

        Chrome 22.0: Executed 2 of 2 SUCCESS (0.021 secs / 0.001 secs)


ではエンドツーエンドのテストの方を見てみましょう。

__`test/e2e/scenarios.js`:__
<pre>
...
    it('should be possible to control phone order via the drop down select box',
        function() {
      //let's narrow the dataset to make the test assertions shorter
      input('query').enter('tablet');

      expect(repeater('.phones li', 'Phone List').column('phone.name')).
          toEqual(["Motorola XOOM\u2122 with Wi-Fi",
                   "MOTOROLA XOOM\u2122"]);

      select('orderProp').option('Alphabetical');

      expect(repeater('.phones li', 'Phone List').column('phone.name')).
          toEqual(["MOTOROLA XOOM\u2122",
                   "Motorola XOOM\u2122 with Wi-Fi"]);
    });
...
</pre>

エンドツーエンドのテストはセレクトボックスの持つ並び替えの仕組みが正しく機能することを確認します。

`./scripts/e2e-test.sh`を再実行するか、エンドツーエンドテストの`runner.html`のブラウザタブを更新してテストを実行、もしくは{@link http://angular.github.com/angular-phonecat/step-4/test/e2e/runner.html Angular's server}でテストの実行を見て下さい。

# 実験

* `PhoneListCtrl`コントローラーから`orderProp`の値を設定している文を削除し、Angularがドロップダウンリストに一時的に"unknown"オプションを追加していることと、並びがソートされていないことを確認して下さい。

* `{{orderProp}}`バインディングを`index.html`テンプレートに追加して、現在値を文字列で表示するようにして下さい。

# まとめ

これでソートされるリストをアプリに追加し、アプリをテストしました。{@link step_05 ステップ5}に進んでAngularのサービスとAngularがどのように依存性注入を使っているかを学びましょう。


<ul doc-tutorial-nav="4"></ul>
