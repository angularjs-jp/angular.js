@ngdoc overview
@name Tutorial: 3 - リピーターのフィルタリング
@description

<ul doc-tutorial-nav="3"></ul>


前のステップではアプリの基礎部分を作る過程でたくさんのことをしました。なので今度は簡単なことをやりましょう。全文検索を追加します（そう、簡単なはずです！）。それからエンドツーエンドのテストも書きます。優れたエンドツーエンドテストは素敵なお友達だからです。それはあなたのアプリと共にあり、片時も目を離さず、素早くリグレッションに気づいてくれます。


<div doc-tutorial-reset="3"></div>


今度はアプリに検索ボックスがつきました。ページ上のスマートフォンのリストはユーザーが検索ボックスにタイプしたものによって変化します。

ステップ２と３の主な変更点は以下に挙げます。完全な差分は{@link https://github.com/angular/angular-phonecat/compare/step-2...step-3 GitHub}で見ることができます：


## コントローラー

コントローラーには何も変更を加えていません。


## テンプレート

__`app/index.html`:__
<pre>
  <div class="container-fluid">
    <div class="row-fluid">
      <div class="span2">
        <!--Sidebar content-->

        Search: <input ng-model="query">

      </div>
      <div class="span10">
        <!--Body content-->

        <ul class="phones">
          <li ng-repeat="phone in phones | filter:query">
            {{phone.name}}
            <p>{{phone.snippet}}</p>
          </li>
        </ul>

      </div>
    </div>
  </div>
</pre>

標準HTMLの`<input>`タグを追加し、{@link api/ng.directive:ngRepeat ngRepeat}ディレクティブへの入力の処理にはAngularの{@link api/ng.filter:filter $filter}関数を使いました。

これでユーザーはスマートフォンリストに対して検索条件を入力し、直ちに検索結果を確認できるようになります。この新しいコードは次のことをしています：

* データバインディング：これはAngularのコアな機能の１つです。ページが読み込まれると、Angularはインプットボックスの名前をデータモデル内の同じ名前の変数にバインドし、２つを同期した状態に保ちます。

  このコードでは、ユーザーがインプットボックスに打ち込んだデータ（__`query`__と呼びましょう）は直ちにリストリピーター（`phone in phones | filter:`__`query`__）内のフィルターインプットとして使われます。データモデルへの変更がリピーターの入力に変化を生じさせると、リピーターはモデルの現在の状態を反映するためにDOMを効率的に更新します。

      <img  class="diagram" src="img/tutorial/tutorial_03.png">

* `filter`フィルターの利用：{@link api/ng.filter:filter filter}関数は`query`に一致するレコードだけを含む新しい配列を生成するために`query`の値を使います。

  `ngRepeat`は、`filter`フィルターから返されるスマートフォンの数が変化するのに応じてビューを自動的に更新します。この処理は開発者の目に触れずに行われます。

## テスト

ステップ２では、単体テストの書き方・実行の仕方を学びました。単体テストはコントローラーやJavaScriptで書かれたアプリ内のその他のコンポーネントをテストするのに最適ですが、DOM操作やアプリ内の連携は簡単にはテストできません。こうしたことに関しては、エンドツーエンドのテストの方がずっとましな選択肢になります。

テンプレートやデータバインディングによって検索機能は完全に実装できたので、初めてのエンドツーエンドのテストを書いて、この機能が上手く動くことを確認しましょう。

__`test/e2e/scenarios.js`:__
<pre>
describe('PhoneCat App', function() {

  describe('Phone list view', function() {

    beforeEach(function() {
      browser().navigateTo('../../app/index.html');
    });


    it('should filter the phone list as user types into the search box', function() {
      expect(repeater('.phones li').count()).toBe(3);

      input('query').enter('nexus');
      expect(repeater('.phones li').count()).toBe(1);

      input('query').enter('motorola');
      expect(repeater('.phones li').count()).toBe(2);
    });
  });
});
</pre>

このテストのシンタックスはJasmineで書かれたコントローラーの単体テストにそっくりですが、エンドツーエンドのテストは{@link guide/dev_guide.e2e-testing Angular's end-to-end test runner}のAPIを使っています。

エンドツーエンドのテストを実行するには、ブラウザの新しいタブで次のどれかを開きましょう：

* node.jsユーザー：{@link http://localhost:8000/test/e2e/runner.html}
* その他のhttpサーバーのユーザー：`http://localhost:[port-number]/[context-path]/test/e2e/runner.html`
* このページを読んでいるだけの人: {@link http://angular.github.com/angular-phonecat/step-3/test/e2e/runner.html}

先の章では単体テストを実行するためにTestacularをどう使うかを見ました。でもTestacularはエンドツーエンドのテストを走らせるのにも使えるんです！スクリプト`./scripts/e2e-test.sh`を使って下さい。エンドツーエンドのテストは遅いので、単体テストの時とは違ってTestacularはテストが終わると終了し、ファイルが変更されるたびに自動で再実行するようなことはありません。テストセットを再実行するには、`e2e-test.sh`スクリプトをもう一度実行して下さい。

このテストは検索ボックスとリピーターが正常に連携されていることを確認します。Angularにおいてエンドツーエンドのテストを書くのが如何に簡単か見て下さい。これは簡単なテストを例にとってはいますが、機能的で読み易いエンドツーエンドのテストを書くのは本当にこんなに簡単なのです。

# 実験

* `{{query}}`バインディングを`index.html`テンプレートに加えてモデル`query`の現在の値を表示し、インプットボックスにタイプするにつれてそれがどのように変化するのかを見てみましょう。

* HTMLページのタイトルに表示させる`query`モデルの現在値がどのように取得できるのか見てみましょう。

  `{{query}}`を次のようにただtitleタグの要素に加えればいいと思うかもしれません：

          <title>Google Phone Gallery: {{query}}</title>

  でも、ページを再読み込みすると期待した結果は得られません。これは"query"モデルがbody要素で定義されたスコープの中にあるためです。

          <body ng-controller="PhoneListCtrl">

  もしも`<title>`要素からqueryモデルにバインドしたければ、`ngController`宣言をHTML要素に__移動__しないといけません。なぜならHTML要素はbodyとtitle両方の親だからです：

          <html ng-app ng-controller="PhoneListCtrl">

  `ng-controller`宣言をbody要素から__取り除く__ことを忘れないで下さい。

  title要素の中での２重中括弧の使用は上手くいきましたが、ページを読み込んでいる一瞬の間、それが実際ユーザーに見えてしまったことに気づいたかもしれません。よりよい方法は{@link api/ng.directive:ngBind ngBind}ディレクティブか{@link api/ng.directive:ngBindTemplate ngBindTemplate}ディレクティブを使うことです。これらはページ読み込み中ユーザーから見えません。

          <title ng-bind-template="Google Phone Gallery: {{query}}">Google Phone Gallery</title>

* 次のエンドツーエンドのテストを`test/e2e/scenarios.js`の`describe`ブロックに追加しましょう：

  <pre>
    it('should display the current filter value within an element with id "status"',
        function() {
      expect(element('#status').text()).toMatch(/Current filter: \s*$/);

      input('query').enter('nexus');

      expect(element('#status').text()).toMatch(/Current filter: nexus\s*$/);

      //alternative version of the last assertion that tests just the value of the binding
      using('#status').expect(binding('query')).toBe('nexus');
    });
  </pre>

  エンドツーエンドのテストランナーを開いたブラウザタブを更新してテストが失敗することを確かめましょう。テストを成功させるには`index.html`テンプレートを編集して、`id`として`"status"`、中身に"Current filter:"に続けて`query`バインディングを持つ`div`または`p`要素を追加しましょう。例えば：

          <div id="status">Current filter: {{query}}</div>

* `pause()`文をエンドツーエンドのテストの中に追加して、テストを再実行します。ランナーが途中で止まるはずです。これによって、ブラウザに表示されているアプリケーションの状態を調べることができます。アプリは実行中です！検索文字列を変えればこのことが確認できます。エンドツーエンドのテストをトラブルシュートする上でこれはとても役に立ちます。


# まとめ

全文検索と、検索が機能することを確認するためのテストを追加しました！{@link step_04 step 4}に進んでスマートフォンアプリにソート機能を追加する方法を学びましょう。


<ul doc-tutorial-nav="3"></ul>

