@ngdoc overview
@name Tutorial: 5 - XHRs & Dependency Injection
@description

<ul doc-tutorial-nav="5"></ul>

ハードコーディングされた３つの携帯電話データセットだけでアプリケーションを作るのは終わりにしましょう！ angular 組み込みの {@link api/ng services}、{@link api/ng.$http $http} を使ってより大きなデータセットを取得してみましょう。
angular の {@link guide/di dependency-injection (DI)} を使って PhoneListCtrl コントローラーに $http サービスを提供します。

<div doc-tutorial-reset="5"></div>

携帯電話が 20 個表示されているはずです。主な変更点は以下に挙げます。完全な差分は {@link
https://github.com/angular/angular-phonecat/compare/step-4...step-5
GitHub}で見ることができます：


## Data

プロジェクトの中に比較的大きいphone配列がJSON formatで記述されている app/phones/phones.json ファイルがあります。このファイルを見てみましょう:

<pre>
[
 {
  "age": 13,
  "id": "motorola-defy-with-motoblur",
  "name": "Motorola DEFY\u2122 with MOTOBLUR\u2122",
  "snippet": "Are you ready for everything life throws your way?"
  ...
 },
...
]
</pre>


## Controller

WEBサーバ上にある app/phones/phones.json ファイルをHTTPリクエストでフェッチするために angular の {@link api/ng.$http $http}サービスを使います。$http は 数あるbuilt-in {@link api/ng angular services}のひとつで、Web アプリケーションにありがちなオペレーションを担当します。angular はこのようなサービスを必要なときに注入してくれます。
サービスは angular の {@link guide/di DI subsystem} から管理されています。

__`app/js/controllers.js:`__
<pre>
function PhoneListCtrl($scope, $http) {
  $http.get('phones/phones.json').success(function(data) {
    $scope.phones = data;
  });

  $scope.orderProp = 'age';
}

//PhoneListCtrl.$inject = ['$scope', '$http'];
</pre>

$http がWEBサーバに対して HTTP GET request を行います。対象は phone/phones.json で(このURLはindex.htmlファイルからの相対パスとして解決されます)サーバはJSONファイルの内容を返します(そのレスポンスはバックエンドのサーバで動的生成されることもあるでしょう。動的生成であろうとファイルであろうと、ブラウザやアプリケーションからは同じに見えます。このチュートリアルでは話を単純にするためJSONファイルになっています)

$http サービスは success メソッドを持つ{@link api/ng.$q promise object}を返します。非同期のレスポンスを処理するために、このメソッドを呼び、phones というモデルのかたちで、このコントローラーが扱うスコープにデータを設定します。
お気づきでしょうが angular は検出されたJSONを自分でパースします！
angular でサービスを使用するには、単純に依存するサービスの名前をコントローラーのコンストラクター関数への引数として宣言するだけで良いのです。次の例をみてください:

    function PhoneListCtrl($scope, $http) {...}

コントローラーが作成される時に、angular の dependency injector がサービスをそのコントローラーに対して提供します。この dependency injector は、そのサービスが持っている依存性も解決してくれます（サービスは他のサービスに依存することが多いです）。

引数の名前は重要です。なぜならこの injector は必要な依存性を探し当てるために引数の名前を使うからです。

<img  class="diagram" src="img/tutorial/xhr_service_final.png">


### '$' Prefix Naming Convention

独自のサービスを作ることもできます。実際に Step 11 ではそれを行います。名前付けのルールとして、angular の組み込みサービス、スコープのメソッドとその他いくつかの angular API には名前の先頭に '$' が付きます。名前の衝突を避けるために、独自のサービスには先頭に '$' を付けないでください。


### A Note on Minification

angular はコントローラーの依存性をコンストラクター引数の名前を使って解決するので、もし PhoneListCtrl の Javascript code を  {@link http://en.wikipedia.org/wiki/Minification_(programming)
minify} してしまうと、全ての関数引数も minify されてしまうので、dependency injector がサービスを見つけることができなくなってしまいます。 minification によって生じる問題を克服するには、上記コードスニペットの最終行にあるように（コメントアウトされています）、コントローラー関数の $inject プロパティーにサービスの名前を配列として割り当ててください:

    PhoneListCtrl.$inject = ['$scope', '$http'];

また、minification 問題を回避するために依存性リストを指定する方法がもうひとつあります。それは、ブラケットを使い、文字列の配列（依存性の名前を表します）の後に注入先の関数を並べた配列の形で、注入先の関数をラップする方法です:

    var PhoneListCtrl = ['$scope', '$http', function($scope, $http) { /* constructor body */ }];

どちらの方法も、angular が注入するどの関数に対しても動作しますので、プロジェクトのスタイルガイドなどに合わせてどちらを使用するか決めてください。

## Test

__`test/unit/controllersSpec.js`:__

依存性注入（DI）を使い始め、またコントローラーが依存性を持っているので、テスト中でのコントローラーの生成は今までより少し複雑になります。new 演算子を使用してニセの $http 実装をコンストラクターに渡すこともできます。しかし、おすすめの（しかもより簡単な）方法は、本番環境のコードが裏でやっているのと同じ方法で、テスト環境内でのコントローラーを作成することです。次のようになります:

<pre>
describe('PhoneCat controllers', function() {

  describe('PhoneListCtrl', function(){
    var scope, ctrl, $httpBackend;

    beforeEach(inject(function(_$httpBackend_, $rootScope, $controller) {
      $httpBackend = _$httpBackend_;
      $httpBackend.expectGET('phones/phones.json').
          respond([{name: 'Nexus S'}, {name: 'Motorola DROID'}]);

      scope = $rootScope.$new();
      ctrl = $controller(PhoneListCtrl, {$scope: scope});
    }));
</pre>

注意： テスト環境では Jasmine と angular-mocks.js を読み込んでいるので、２つのヘルパーメソッド{@link api/angular.mock.module module} と {@link api/angular.mock.inject inject} を使い、injector の設定と、injector へのアクセスを行います。
テスト環境では下記のようにコントローラーを作ります:

* inject ヘルパーメソッドを使用して {@link api/ng.$rootScope $rootScope}, {@link api/ng.$controller $controller} そして {@link api/ng.$httpBackend $httpBackend} のインスタンスを Jasmine の beforeEach 関数へ注入します。これらのインスタンスはテスト毎に白紙の状態から生成される injector から生成されます。このことにより、それぞれのテストは初期状態から始まり、他のテスト内で起きたことから影響を受けません。



* $rootScope.$new() を呼んで、コントローラーのための新しいスコープを生成します。

* `PhoneListCtrl` 関数と先ほど作ったスコープをパラメーターとして、注入された $controller 関数を 呼びます。

* 現在のコードでは、コントローラー内で $http サービスを使用して電話リストを取得しているので、PhoneListCtrl の子スコープを作成する前に、テスト実行環境に対してコントローラーから来る http リクエストへの準備をしておくように伝えなければなりません。そのためには:

* $httpBackend サービスを beforeEach 関数へ注入するようにリクエストします。これは本番環境で全ての XHR と JSONP リクエストを受け持つサービスのモックバージョンです。このモックのおかげで、ネイティブ API やそれに伴う global state （これらのおかげでテストは悪夢となりえます）を扱わずにテストを書くことができます。

* $httpBackend.expectGET メソッドを使用して、$httpBackend サービスに HTTP リクエストが来ることを教えておき、またどのように返答するかを指示します。$httpBackend.flush メソッドを呼んではじめてレスポンスが返ることに気をつけてください。

まずは、レスポンスが来る前には phones モデルが存在しないことをチェックするアサーションを書きます。

<pre>
    it('should create "phones" model with 2 phones fetched from xhr', function() {
      expect(scope.phones).toBeUndefined();
      $httpBackend.flush();

      expect(scope.phones).toEqual([{name: 'Nexus S'},
                                   {name: 'Motorola DROID'}]);
    });
</pre>

* $httpBackend.flush() を呼びリクエストキューをフラッシュします。これで $http サービスから返された promise が、あらかじめ指示してあったレスポンスによって解決されます。

* 今度はスコープに phone モデルが存在することを確認するアサーションを書きます。

最後に我々は`orderProp`の初期値が正しくセットされているか確認します

<pre>
    it('should set the default value of orderProp model', function() {
      expect(scope.orderProp).toBe('age');
    });
  });
});
</pre>

Testacular tab内の出力結果を確認してみてください。

       Chrome 22.0: Executed 2 of 2 SUCCESS (0.028 secs / 0.007 secs)



# Experiments

* index.htmlの下部に、{{phones | json}} バインディングを加え、電話リストを json フォーマットで表示してみます。

* PhoneListCtrl コントローラーで、http レスポンスに前処理を加えリストのはじめの 5 件のみ表示するようにします。$http コールバックの中で下記のコードを使ってください:

         $scope.phones = data.splice(0, 5);


# Summary

これで angular のサービスを使うのがいかに簡単か学習しましたね（angular の dependency injection のおかげです）。{@link step_06 step 6} へ進んで、サムネール画像とリンクを加えてみてください。

<ul doc-tutorial-nav="5"></ul>
