@ngdoc overview
@name Tutorial: 2 - Angularテンプレート
@description

<ul doc-tutorial-nav="2"></ul>


それではいよいよウェブページを動的にしてみましょう -- AngularJSを使って。さらにこれから追加するコントローラーのコードを検証するテストも書きます。

アプリケーションのコードを構造化する方法はたくさんあります。Angularアプリでは、コードを分割し、問題を分けるために{@link http://en.wikipedia.org/wiki/Model–View–Controller モデル-ビュー-コントローラー(MVC) デザインパターン}の使用を推奨します。このことを念頭に、早速AngularとJavaScriptを少し使って私達のアプリにモデル、ビュー、コントローラーのコンポーネントを加えましょう。

<div doc-tutorial-reset="2"></div>


アプリには今、３つのスマートフォンが並んだリストがあります。

主な変更点は以下に挙げます。完全な差分は{@link https://github.com/angular/angular-phonecat/compare/step-1...step-2 GitHub}で見ることができます。


## ビューとテンプレート

Angularにおいて、__ビュー__はHTML__テンプレート__を介したモデルの射影です。つまりモデルが変化するとAngularは適切なバインディングポイントを更新し、それによってビューが更新されます。

ビューコンポーネントはAngularによって次のテンプレートから生成されます：

__`app/index.html`:__
<pre>
<html ng-app>
<head>
  ...
  <script src="lib/angular/angular.js"></script>
  <script src="js/controllers.js"></script>
</head>
<body ng-controller="PhoneListCtrl">

  <ul>
    <li ng-repeat="phone in phones">
      {{phone.name}}
      <p>{{phone.snippet}}</p>
    </li>
  </ul>
</body>
</html>
</pre>

ハードコードされたスマートフォンのリストを{@link api/ng.directive:ngRepeat ngRepeatディレクティブ}と中括弧で囲われた２つの{@link guide/expression Angular式}: `{{phone.name}}`と`{{phone.snippet}}`で置き換えました。

* `<li>`タグの中の文`ng-repeat="phone in phones"`はAngularリピーターです。このリピーターは最初の`<li>`タグをテンプレートとして使ってリスト内の各スマートフォンに対して`<li>`要素を作るようにAngularに指示します。

* ステップ0で学んだ通り、`phone.name`と`phone.snippet`を囲む中括弧はバインディングを表します。定数の評価とは違い、これらの式は`PhoneListCtrl`コントローラーの中で設定されているアプリケーションのモデルを参照します。

      <img class="diagram" src="img/tutorial/tutorial_02.png">


## モデルとコントローラー

データ__モデル__（オブジェクトリテラルで書かれたスマートフォンの単純な配列）は`PhoneListCtrl`コントローラーの中で初期化されます：

__`app/js/controllers.js`:__
<pre>
function PhoneListCtrl($scope) {
  $scope.phones = [
    {"name": "Nexus S",
     "snippet": "Fast just got faster with Nexus S."},
    {"name": "Motorola XOOM™ with Wi-Fi",
     "snippet": "The Next, Next Generation tablet."},
    {"name": "MOTOROLA XOOM™",
     "snippet": "The Next, Next Generation tablet."}
  ];
}
</pre>




ここではまだコントローラーはあまりコントロールをしていませんが、とても重要な役割を演じています。データモデルに対してコンテキストを提供することで、コントローラーはモデルとビューの間のデータバインディングを確立しています。ここではプレゼンテーション、データ、ロジックのコンポーネントを次のようにして繋いでいます：

* `PhoneListCtrl` -- コントローラー関数の名前（JavaScriptファイル`controllers.js`の中）。`<body>`タグの{@link api/ng.directive:ngController ngController}ディレクティブの値に一致する。

* 続いてスマートフォンのデータがコントローラー関数に注入された*スコープ*（`$scope`）に与えられます。コントローラースコープはアプリケーション起動時に生成されるルートスコープをプロトタイプ継承しています。このコントローラースコープは`<body ng-controller="PhoneListCtrl">`タグ内の全てのバインディングで利用可能です。

  Angularにおいてスコープの概念はとても重要です；スコープはテンプレート、モデル、コントローラーが共同して機能するための糊といえます。Angularはモデルとビューを別々に、それでいて同期させておくために、テンプレート・データモデル・コントローラーに含まれた情報と共にスコープを使います。モデルに対する全ての変更はビューに反映されます; ビューで起きた全ての変更はモデルに反映されます。

  Angularのスコープについて更に学ぶには、{@link api/ng.$rootScope.Scope angular スコープドキュメンテーション}を参照して下さい。


## テスト

"Angularのやり方"では、コードを開発する過程でのテストが容易になります。先ほど作ったコントローラーに対する次の単体テストを見て下さい：

__`test/unit/controllersSpec.js`:__
<pre>
describe('PhoneCat controllers', function() {

  describe('PhoneListCtrl', function(){

    it('should create "phones" model with 3 phones', function() {
      var scope = {},
          ctrl = new PhoneListCtrl(scope);

      expect(scope.phones.length).toBe(3);
    });
  });
});
</pre>

このテストはスマートフォン配列の中に３つのレコードがあることを確認します。Anuglarのコードに対して単体テストを書くことが如何に簡単かがこの例から分かります。ソフトウェアの開発においてテストが不可欠なものであることから、Angularではテストを書くことを簡単にして開発者がテストを書く気になるようにしています。

Angularの開発者はテストを書く時、Jasmineの振舞い駆動開発（BDD）フレームワークの記法を好んで使います。AngularはJasmineを使うことを強制しませんが、このチュートリアルにあるテストは全てJasmineで書かれています。Jasmineについては{@link http://pivotal.github.com/jasmine/ Jasmine home page}や{@link https://github.com/pivotal/jasmine/wiki Jasmine wiki}で学ぶことができます。

angular-seedプロジェクトは全ての単体テストを{@link http://vojtajina.github.com/testacular/ Testacular}を使って実行するように予め設定されています。テストを実行させるには次のようにして下さい：

1. ターミナルのウィンドウやタブを新しく開き、`angular-phonecat`ディレクトリに移動してから`./scripts/test.sh`を実行してTestacularサーバーを起動して下さい。

2. Testacularは自動的にChromeブラウザの新しいインスタンスを開始します。これは気にせずバッググラウンドで実行させておきましょう。Testacularはこのブラウザをテストの実行に使います。

3. 次のような（あるいはそれに似た）ものがターミナルに出力されるでしょう：

             info: Testacular server started at http://localhost:9876/
             info (launcher): Starting  browser "Chrome"
             info (Chrome 22.0): Connected on socket id tPUm9DXcLHtZTKbAEO-n
             Chrome 22.0: Executed 1 of 1 SUCCESS (0.093 secs / 0.004 secs)

  できました！テストは成功です！もしくは失敗です...

4. テストを再実行するには、ただソースやテストファイルに何か変更を加えるだけです。Testacularが変更に気づいて、あなたのためにテストを再実行してくれます。親切じゃありませんか？

# 実験

* `index.html`に他のバインディングを加えましょう。例えば：

          <p>Total number of phones: {{phones.length}}</p>

* コントローラーの中に新しいモデルプロパティを作り、テンプレートからこれをバインドします。例えば：

          $scope.hello = "Hello, World!"

  "Hello, World!"と表示されるようにブラウザを更新して下さい

* 単純なテーブルを作るためにリピーターを作ります：

          <table>
            <tr><th>row number</th></tr>
            <tr ng-repeat="i in [0, 1, 2, 3, 4, 5, 6, 7]"><td>{{i}}</td></tr>
          </table>

  そして、リストが１始まりになるようにバインディングの中でiを１インクリメントします。

          <table>
            <tr><th>row number</th></tr>
            <tr ng-repeat="i in [0, 1, 2, 3, 4, 5, 6, 7]"><td>{{i+1}}</td></tr>
          </table>

* 単体テストが失敗するように`toBe(3)`の文を`toBe(4)`に変えましょう。


# まとめ

これでモデル、ビュー、コントローラーのコンポーネントに分離された動的アプリができました。また開発と並行してテストもできています。それでは{@link step_03 ステップ3}に進んでアプリに全文検索を追加する方法を学びましょう。


<ul doc-tutorial-nav="2"></ul>
