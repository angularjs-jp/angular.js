@ngdoc overview
@name Developer Guide: Angular の MVC について : コントローラコンポーネントを理解する
@description

Angular において、コントローラは Angular の {@link scope スコープ} (ルートスコープを除く)
のインスタンスに必要なものを補うために使われる JavaScript の関数 (型またはクラス) です。
あなた、もしくは Angular が、{@link api/ng.$rootScope.Scope#$new scope.$new} API 
を使って新たな子スコープオブジェクトを作成するとき、
オプションでコントローラをメソッドの引数として渡すことができます。
こうすると Angular は、渡されたコントローラと新たなスコープを関連付け、
スコープの振る舞いをコントローラが補うようになります。

コントローラは次の目的で使います。

- スコープオブジェクトの初期状態を設定するため
- スコープオブジェクトの振る舞いを追加するため

# スコープオブジェクトの初期状態を設定する

たいていの場合、アプリケーションを作成するときには、 
Angular のスコープの初期状態を設定する必要があります。

Angular は新たな Angular スコープオブジェクトに対して、コントローラのコンストラクタ関数を
 (JavaScript の `Function#apply` と同じように) 作用させ、これによってスコープの初期状態が設定されます。
したがって、 Angular が (コントローラのコンストラクタに対して `new` 演算子を呼び出して) 
コントローラ型のインスタンスを作成することはありません。
コンストラクタは常に既存のスコープオブジェクトに対して適用されます。

スコープの初期状態を設定するには、モデルプロパティを作成します。
以下に例を示します。

<pre>
function GreetingCtrl($scope) {
 $scope.greeting = 'Hola!';
}
</pre>

`GreetingCtrl` コントローラは、テンプレートで参照できる `greeting` モデルを作成しています。

**注意**: 本ドキュメントの例の多くでは、関数をグローバルスコープに作成しています。
これはあくまで例を示すためだけのもので、実際のアプリケーションでは次のように、
あなたのアプリケーション独自の Angular モジュールの `.controller` メソッドを使用すべきです。

<pre>
var myApp = angular.module('myApp',[]);

myApp.controller('GreetingCtrl', ['$scope', function(scope) {
  scope.greeting = 'Hola!';
}]);
</pre>

また、コントローラが Angular の提供する `$scope` サービスに依存していることを明示するために、
配列表記を使っていることにも注意してください。

# スコープオブジェクトに振る舞いを追加する

Angular のスコープオブジェクトにおける振る舞いは、
テンプレート / ビューから利用できるスコープのメソッドプロパティの形式をとります。
この振る舞いは、アプリケーションのモデルと連携したり、モデルを変更したりします。

このガイドの {@link dev_guide.mvc.understanding_model モデル} の章で説明した通り、
スコープに割り当てられたあらゆるオブジェクトやプリミティブ型はモデルのプロパティになります。
スコープに割り当てられたすべての関数は、テンプレート / ビューで使用でき、
Angular の expression や、 `ng` 
イベントハンドラディレクティブ (例: {@link api/ng.directive:ngClick ngClick}) 
を通して呼び出すことができます。

# コントローラを正しく使用する

一般的に、コントローラであまり多くのことをすべきではありません。
コントローラには、単一のビューで必要なビジネスロジックのみを含めるべきです。

コントローラを簡潔にするもっとも一般的な方法は、コントローラに属さない処理をサービスにカプセル化して、
依存性注入を介してこれらのサービスを使用することです。
この方法は、このガイドの{@link di 依存性注入} や {@link dev_guide.services サービス} の章で説明しています。

コントローラを次の目的で使用しないでください。

- すべての種類の DOM 操作 — コントローラにはビジネスロジックのみが含まれるべきです。
  DOM 操作 (アプリケーションのプレゼンテーションロジック) は、テストが難しいことでよく知られています。
  何らかのプレゼンテーションロジックをコントローラに含めてしまうと、
  ビジネスロジックのテスト容易性に大きな影響を与えてしまいます。
  Angular では、自動的に DOM 操作を行うために {@link dev_guide.templates.databinding 
  データバインディング} を用意しています。
  もし手動の DOM 操作を行う必要があれば、プレゼンテーションロジックを {@link guide/directive 
  ディレクティブ} にカプセル化してください。
- 入力のフォーマット処理 — 代わりに {@link forms Angular のフォームコントロール} を使用してください。
- 出力のフィルタ処理 — 代わりに {@link dev_guide.templates.filters Angular のフィルタ} を使用してください。
- ステートレス、または、コントローラ間で共有できるステートフルなコードを実行 — 
  代わりに {@link dev_guide.services Angular のサービス} を使用してください。
- 他のコンポーネントのインスタンス化やライフサイクルの管理 (サービスのインスタンスを作成するなど)


# コントローラと Angular のスコープオブジェクトを関連付ける

{@link api/ng.$rootScope.Scope#$new scope.$new} API を使うと、
明示的にコントローラとスコープオブジェクトを関連付けることができます。
また、暗黙的に関連付けを行う場合は、{@link api/ng.directive:ngController ngController 
ディレクティブ}を使用するか、 {@link api/ng.$route $route サービス} を使用することができます。


## コントローラのコンストラクタとメソッドの例

コントローラコンポーネントが Angular でどのように動作するのかを説明するため、
次のコンポーネントを持つ小さなアプリケーションを作成してみましょう。

- 2 つのボタンと簡単なメッセージがある {@link dev_guide.templates テンプレート}
- `spice` という名前の文字列からなるモデル
- `spice` の値をセットする 2 つの関数を持つコントローラ

テンプレートのメッセージは `spice` モデルとのバインディングを含んでおり、その値は "very" 
という文字列にデフォルトでセットされています。
どちらのボタンがクリックされたかにより、 `spice` モデルは `chili` または `jalapeño` にセットされ、
メッセージはデータバインディングによる自動的に更新されます。


## コントローラの例

<pre>
<body ng-controller="SpicyCtrl">
 <button ng-click="chiliSpicy()">Chili</button>
 <button ng-click="jalapenoSpicy()">Jalapeño</button>
 <p>The food is {{spice}} spicy!</p>
</body>

function SpicyCtrl($scope) {
 $scope.spice = 'very';
 $scope.chiliSpicy = function() {
   $scope.spice = 'chili';
 }
 $scope.jalapenoSpicy = function() {
  $scope.spice = 'jalapeño';
 }
}


</pre>

上記のコードで着目すべきことは下記の通りです。

- `ngController` ディレクティブが、
  (暗黙的に) スコープを作成するためにテンプレートで使用されていて、
  `SpicyCtrl` コントローラによってスコープに必要なものが補われている (管理されている) 
  ということ
- `SpicyCtrl` は単なるプレーンな JavaScript 関数であるということ。
  (任意の) 命名規則として、コントローラの名前は大文字で始まり、 "Ctrl" または "Controller" 
  で終わるということ。
- `$scope` にプロパティを代入すると、モデルが作成または更新されるということ。
- コントローラメソッドはスコープへの直接代入で作成できるということ
  (`chiliSpicy` メソッド)
- 2 つのコントローラメソッドはともにテンプレートで利用できるということ
  (`body` 要素とその子要素で利用できます)。
- 注意 : 1.0 RC 以前のバージョンの Angular では $scope メソッドの代わりに 
  `this` を常に使うことができましたが、現在のバージョンでは使えない場合があります。
  スコープで定義されたメソッド内では `$scope` の代わりに `this` を使うことができます
  (Angular が `this` を $scope にセットします)。
  しかし、コントローラのコンストラクタ内では、 `$scope` の代わりに `this` を使うことはできません。
- 注意 : 1.0 RC 以前のバージョンの Angular では、
  スコープにプロトタイプメソッドを自動的に追加していましたが、
  現在のバージョンでは追加されません。すべてのメソッドは手動でスコープに追加する必要があります。


コントローラメソッドは引数を受け取ることができます。先ほどの例を少し変更した次のコードでこれを示します。

## コントローラメソッドに引数を渡す例

<pre>
<body ng-controller="SpicyCtrl">
 <input ng-model="customSpice" value="wasabi">
 <button ng-click="spicy('chili')">Chili</button>
 <button ng-click="spicy(customSpice)">Custom spice</button>
 <p>The food is {{spice}} spicy!</p>
</body>

function SpicyCtrl($scope) {
 $scope.spice = 'very';
 $scope.spicy = function(spice) {
   $scope.spice = spice;
 }
}
</pre>

`SpicyCtrl` コントローラには、 `spice` という引数をとる `spicy` という名前のメソッドが 1 
つだけ定義されるようになった点に着目してください。
そして、テンプレートではこのコントローラのメソッドを参照し、 1 つ目のボタンのイベントバインディングでは、
文字列定数 `'chili'` を渡すように、また、2 つ目のボタンのイベントバインディングでは (input 
要素にバインドされた) モデルプロパティの `customSpice` を渡しています。


## コントローラを継承する例

Angular におけるコントローラの継承は {@link api/ng.$rootScope.Scope スコープ} の継承に基づいています。
例を見てみましょう。

<pre>
<body ng-controller="MainCtrl">
 <p>Good {{timeOfDay}}, {{name}}!</p>
 <div ng-controller="ChildCtrl">
   <p>Good {{timeOfDay}}, {{name}}!</p>
   <p ng-controller="BabyCtrl">Good {{timeOfDay}}, {{name}}!</p>
</body>

function MainCtrl($scope) {
 $scope.timeOfDay = 'morning';
 $scope.name = 'Nikki';
}

function ChildCtrl($scope) {
 $scope.name = 'Mattie';
}

function BabyCtrl($scope) {
 $scope.timeOfDay = 'evening';
 $scope.name = 'Gingerbreak Baby';
}
</pre>

3 つの `ngController` のディレクティブをどのようにネストしているかに着目してください。
このテンプレートの構造の結果、ビューに対して4つのスコープが作成されることになります。

- ルートスコープ
- `MainCtrl` スコープ : 内部に `timeOfDay` と `name` モデルを含む
- `ChildCtrl` スコープ : `MainCtrl` スコープ の `name` モデルをシャドウ化(不可視化)し、
  `timeOfDay` モデルを `MainCtrl` スコープから継承している
- `BabyCtrl` スコープ : `MainCtrl` スコープで定義された `timeOfDay` モデルと `ChildCtrl` 
  スコープで定義された `name` モデルを共にシャドウ化している

コントローラ間の継承は、モデルが継承されるのと同じ方法で行われます。
したがって、先ほどの例では、すべてのモデルは文字列値を返すコントローラメソッドに置き換えることができます。

注意 : 2 つのコントローラ間の通常のプロトタイプ継承は、期待どおりには動作しません。
なぜなら、先ほど説明した通り、コントローラは Angular によって直接インスタンス化されるのではなく、
スコープオブジェクトに対して適用 (apply) されるからです。


## コントローラのテスト

コントローラをテストする方法はたくさんありますが、その中でも最良の方法の1つは下記に示すように、
`$rootScope` と `$controller` を注入する手法です。

コントローラ関数 :
<pre>
function myController($scope) {
   $scope.spices = [{"name":"pasilla", "spiciness":"mild"},
                  {"name":"jalapeno", "spiceiness":"hot hot hot!"},
                  {"name":"habanero", "spiceness":"LAVA HOT!!"}];

   $scope.spice = "habanero";
}
</pre>

コントローラのテスト :
<pre>
describe('myController function', function() {

  describe('myController', function() {
    var scope;

    beforeEach(inject(function($rootScope, $controller) {
      scope = $rootScope.$new();
      var ctrl = $controller(myController, {$scope: scope});
    }));

    it('should create "spices" model with 3 spices', function() {
      expect(scope.spices.length).toBe(3);
    });

    it('should set the default value of spice', function() {
      expect(scope.spice).toBe('habanero');
    });
  });
});
</pre>


もしネスト化されたコントローラをテストする必要があれば、 DOM 
上に存在するのと同じスコープの階層をテストで再現しなければなりません。

<pre>
describe('state', function() {
    var mainScope, childScope, babyScope;

    beforeEach(inject(function($rootScope, $controller) {
        mainScope = $rootScope.$new();
        var mainCtrl = $controller(MainCtrl, {$scope: mainScope});
        childScope = mainScope.$new();
        var childCtrl = $controller(ChildCtrl, {$scope: childScope});
        babyScope = childCtrl.$new();
        var babyCtrl = $controller(BabyCtrl, {$scope: babyScope});
    }));

    it('should have over and selected', function() {
        expect(mainScope.timeOfDay).toBe('morning');
        expect(mainScope.name).toBe('Nikki');
        expect(childScope.timeOfDay).toBe('morning');
        expect(childScope.name).toBe('Mattie');
        expect(babyScope.timeOfDay).toBe('evening');
        expect(babyScope.name).toBe('Gingerbreak Baby');
    });
});
</pre>


## 関連トピック

* {@link dev_guide.mvc Angular における MVC について}
* {@link dev_guide.mvc.understanding_model モデルコンポーネントを理解する}
* {@link dev_guide.mvc.understanding_view ビューコンポーネントを理解する}


