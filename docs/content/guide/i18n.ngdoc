@ngdoc overview
@name Developer Guide: i18n および l10n
@description

# AngularJSにおける i18n および L10n

**i18nおよびl10nとは？**

国際化(Internationalization)、略してi18nは、製品開発プロセスにおいて、言語と文化へのローカライズを容易にする方法です。

地域化(Localization)、略してl10nは、特定の文化や言語マーケットでのユーザビリティを向上させるために、アプリケーションやテキストを順応させるプロセスです。 

アプリケーション開発者にとって、アプリケーションの国際化を行う事は、アプリケーションから全ての文字列やロケール固有の要素(例えば、日付や通貨形式)を抽象化することを意味します。 
アプリケーションの地域化を行う事は、翻訳と、抽象化された要素のためにローカライズされたフォーマットを提供することを意味します。

**Angularにおいてi18nおよびl10nは、現在どの程度サポートしていますか？**

Angularでは、現在、{@link
http://docs.angularjs.org/#!/api/ng.filter:date datetime}, {@link
http://docs.angularjs.org/#!/api/ng.filter:number number} および {@link
http://docs.angularjs.org/#!/api/ng.filter:currency currency} フィルタにおいて、i18n/L10nをサポートしています。

さらに、Angularでは {@link
api/ng.directive:ngPluralize ngPluralize directive}によって、複数形のローカライズを可能とする機能をサポートしています。

すべてのローカライズ可能なAngular要素では、ロケール固有ルールセットの管理を {@link
api/ng.$locale $locale service}に依存しています.

サンプルに直接ジャンプしたい読者のために。複数のロケールルールセットを用いて、どのようにAngularフィルタを使うかのショーケースを、何枚かのWebページとしてご用意しました。
あなたはこれらのサンプルを、{@link
https://github.com/angular/angular.js/tree/master/i18n/e2e Github}上 または、Angular開発パッケージに含まれたi18/e2efフォルダのどちらかで閲覧できます。

**ロケールIDとは？**

ロケールは、特定の地理的、政治的、または文化的な地域です。
最も一般的なロケールIDは、言語コード および 国コードの、2つの部分から成ります。
例えば、en-US、en-AU、zh-CNは、いずれも有効なロケールIDであり、言語コードと国コードの両方を持っています。

ロケールIDに国コードを指定するかどうかは任意であるため、en、zh、そして sk のようなロケールIDも有効です。
ロケールIDを使うにあたって、詳しい情報は {@link
http://userguide.icu-project.org/locale ICU }のWebサイトを参照してください。

**Angularでサポートされるロケール**

Angularでは、数値(number)と日付フォーマット(datetime)のルールセットを、ロケールごとに異なるファイルとして分割しています。
現在サポートされているロケールは{@link
https://github.com/angular/angular.js/tree/master/i18n/locale こちら} で閲覧できます。

# Angularにロケールルールを提供する

Angularにロケールルールを提供するには、2つのアプローチがあります。

**1. ルールセットを予めバンドルする**

あなたは、`angular.js`または`angular.min.js`ファイルの末尾に、
ロケール固有ファイルの内容を結合することで、希望するロケールファイルをAngularに予めバンドルしておくことができます。

例えば、* nix上(訳注: Linux または Unix)で、ドイツ語のローカライズルールが含まれた angular.js ファイルを生成するには、次の操作で実行できます:

`cat angular.js i18n/angular-locale_de-ge.js > angular_de-ge.js`

通常のangular.jsスクリプトの代わりに、angular_de-ge.js スクリプトをアプリケーションに含めておくと、
アプリケーションが開始されるとき、Angularにはドイツ語のローカライズルールが自動的に適用されます。

**2. index.htmlページ でロケールのjsスクリプトをインクルードする**

あなたはまた、ロケール固有のjsファイルを index.htmlページでインクルードすることもできます。
例えば、もしクライアントがドイツ語のロケールを必要とするならば、あなたはこのような index_de-ge.html をサーブすることになります:

<pre>
<html ng-app>
 <head>
….
   <script src="angular.js"></script>
   <script src="i18n/angular-locale_de-ge.js"></script>
….
 </head>
</html>
</pre>

**2つのアプローチの比較**

どちらのアプローチにおいても、アプリがローカライズされる可能性のあるロケールごとに、異なる index.html ページ または jsファイルを用意しておく必要があります。
また、要求されるロケールに一致する正しいファイルがサーブされるように、サーバを設定しておかなければなりません。

しかしながら、2つ目のアプローチ(index.htmlページでロケールのjsスクリプトをインクルードする方法)は、通常よりも、余分にスクリプトを読み込む必要があり、遅くなる可能性があります。

# "注意点"

**通貨記号の"注意点"**

Angularの{@link http://docs.angularjs.org/#!/api/ng.filter:currency currency フィルタ}によって、
{@link api/ng.$locale locale service}のデフォルトの通貨記号を使うことができます。もしくは、カスタムな通貨記号を使ったフィルタを提供することもできます。

もし、アプリが、単一のロケールのみで使われる場合は、デフォルトの通貨記号のみに頼っても構いません。
しかし、他のロケールの閲覧者からも使われることが予想できる場合は、実際の値を理解するために、あなた自身の通貨記号を明示しなければなりません。

例えば、もしあなたが、通貨フィルタを含んでいる以下のバインディング:
`{{ 1000 | currency }}`
において、1000ドルのアカウント残高を表示したいとします。

現在、アプリのロケールはen-USです。この場合、'$1000.00'と表示されます。

しかしながら、もし、異なるロケール(例えば、日本)の誰かが、アプリを表示したとします。
彼女のブラウザにはロケールとしてjaが指定されています。この場合、アカウント残高には代わりに、'￥1000.00'と表示されます。
これではクライアントを混乱させてしまうでしょう。

このケースにおいては、{@link
http://docs.angularjs.org/#!/api/ng.filter:currency currency フィルタ}によって提供されるデフォルトの通貨記号を、
フィルタを設定する際の通貨記号パラメータとして、例えば 
`{{1000 | currency: "USD $"}}`
のようにオーバライドする必要があります。

これにより、Angularはアカウント残高を常に 'USD $ 1000' と表示し、任意のロケール変更は無視されます。

**翻訳された文字列長の"注意点"**

翻訳された文字列/日時フォーマットは、文字長が大きく変化するという事を覚えておいてください。
例えば、`June 3, 1977`は、スペイン語に翻訳されると、`3 de junio de 1977`になります。

他にも、もっと極端なケースがあるかもしれません。
このため、アプリを国際化する際には、このことを考慮した上でCSSのルールを適用しなければなりません。そして、UI要素が重なることがないよう、徹底的にテストを行なってください。

**タイムゾーンについての注意点**

Angularのdatetimeフィルタでは、ブラウザのタイムゾーン設定が使われるという事を覚えておいてください。
従って、同じアプリケーションであっても、表示される時間情報は、そのアプリケーションが動作しているコンピュータのタイムゾーン設定に依存するため、異なって表示されます。

現在のところ、JavaScriptとAngularJSのどちらにおいても、日付を表示する際に、開発者がタイムゾーンを指定することはできません。
