@ngdoc overview
@name Developer Guide: スコープ
@description

# スコープ (Scope) とは?

{@link api/ng.$rootScope.Scope スコープ } は、アプリケーションのモデルを参照するオブジェクトです。
また、 {@link expression expressions} の実行コンテキストでもあります。
スコープは、アプリケーションの DOM 構造にならった階層構造で管理され、 
{@link guide/expression expressions} を watch したり、イベントを伝播させることができます。

## スコープの特徴

  - スコープは、モデルの変化を検知するための 
    API ({@link api/ng.$rootScope.Scope#$watch $watch}) を提供します。

  - スコープは、 "Angular 領域" (コントローラ・サービス・ Angular イベントハンドラ) の外から、
    モデルの変化をシステム全体の View に伝搬させるための API 
    ({@link api/ng.$rootScope.Scope#$apply $apply}) を提供します。

  - 共有のモデルプロパティへのアクセスを提供しつつ、
    アプリケーションのコンポーネントを独立させられるよう、スコープをネストすることができます。
    あるスコープは、親のスコープからプロパティをプロトタイプ継承します。

  - スコープは、 {@link guide/expression expression} の評価に使われるコンテキストを提供します。
    たとえば、 `{{username}}` という expression は、 
    `username` プロパティが定義されている特定のスコープ内で評価されなければ、意味がありません。

## データモデルとしてのスコープ

スコープは、アプリケーションコントローラとビューを結びつける、のりの役割を果たします。
テンプレートの {@link compiler リンク} フェーズ中に、 
{@link api/ng.$compileProvider#directive ディレクティブ} は 
expression の {@link api/ng.$rootScope.Scope#$watch `$watch`} をスコープに設定します。
`$watch` が設定されると、 ディレクティブ
はスコープ内のプロパティが変化したときに通知を受け取ることができるようになり、
DOM に変更を反映できるようになります。

コントローラもディレクティブも、スコープへの参照を持ちますが、
コントローラ <-> ディレクティブの相互参照は持っていません。
このような構成になっているので、コントローラはディレクティブや DOM から分離されることになります。
これは非常に重要なポイントで、コントローラはビューのことを全く知り得なくなり、
アプリケーションのテストを大幅に改善することができます。


<example>
  <file name="script.js">
    function MyController($scope) {
      $scope.username = 'World';

      $scope.sayHello = function() {
        $scope.greeting = 'Hello ' + $scope.username + '!';
      };
    }
  </file>
  <file name="index.html">
    <div ng-controller="MyController">
      Your name:
        <input type="text" ng-model="username">
        <button ng-click='sayHello()'>greet</button>
      <hr>
      {{greeting}}
    </div>
  </file>
</example>

上の例では、 `MyController` はスコープ内の `username` プロパティに `World` という値を代入しています。
すると、スコープは、代入が行われたことを `input` に通知し、 `input` 
にはユーザ名があらかじめ入力された状態に変わります。
このように、コントローラはスコープにデータを書き込むことができます。

同様に、コントローラはスコープにビヘイビアを定義することができます。
上記の例の `sayHello` メソッドは、ユーザが 'greet' ボタンをクリックしたときに呼び出されます。
`sayHello` メソッドは `username` プロパティを読み取り、 `greeting` プロパティを生成することができます。
このように、スコープ内のプロパティは、 HTML 入力部品にバインドされている場合、
自動的に更新されます。

`{{greeting}}` のレンダリングでは、次のようなことが行われています。

  * テンプレートで `{{greeting}}` が定義されている DOM ノードに関連付けられたスコープを取得します。
    この例では、 `MyController` に渡されたスコープと同じスコープです。
    (スコープの階層については後ほど解説します。)

  * `greeting` {@link guide/expression expression} を上記で取得したスコープで評価し、
    結果を内部の DOM 要素のテキストに反映します。

スコープとそのプロパティは、 ビューを描画するのに使われるデータと考えることができます。
スコープは、ビューが関連するすべてのデータの本当の値を持つ唯一の存在です。

テスト容易性の観点から見ると、コントローラとビューが分離されているのが理想です。
なぜならば、分離されていれば、描画の詳細まで気にすることなく、
コントローラの振る舞いをテストできるからです。

<pre>
  it('should say hello', function() {
    var scopeMock = {};
    var cntl = new MyController(scopeMock);

    // username があらかじめ入力されていることを assert する
    expect(scopeMock.username).toEqual('World');

    // 変更された username と greeting を取得できることを assert する
    scopeMock.username = 'angular';
    scopeMock.sayHello();
    expect(scopeMock.greeting).toEqual('Hello angular!');
  });
</pre>


## スコープの階層構造

Angular アプリケーションはそれぞれ 1 つだけ {@link api/ng.$rootScope ルートスコープ} 
を持っていますが、複数の子スコープを持つことができます。

ディレクティブの中には、新たな子スコープを生成するものがあるため、
アプリケーションは複数のスコープを持つことができます。
(どのディレクティブが新規のスコープを生成するかは、
各ディレクティブのドキュメントを参照してください。)
新規のスコープが生成されると、親スコープの子として追加されます。
このようにして、スコープがアタッチされている DOM にしたがった、
スコープのツリー構造ができあがります。

Angular が `{{username}}` を評価するとき、まず最初にその要素に関連付けられているスコープの中から、
`username` プロパティを探します。
もしプロパティが見つからなければ、ルートスコープに到達するまで親スコープをたどります。
JavaScriptでは、このような振る舞いはプロトタイプ継承と呼ばれ、
子スコープは親スコープをプロトタイプ継承します。

次の例は、アプリケーションの中でのスコープとプロパティのプロトタイプ継承を説明するものです。

<example>
  <file name="style.css">
    /* jsfiddle では .doc-example-live を削除 */
    .doc-example-live .ng-scope {
      border: 1px dashed red;
    }
  </file>
  <file name="script.js">
    function EmployeeController($scope) {
      $scope.department = 'Engineering';
      $scope.employee = {
        name: 'Joe the Manager',
        reports: [
          {name: 'John Smith'},
          {name: 'Mary Run'}
        ]
      };
    }
  </file>
  <file name="index.html">
    <div ng-controller="EmployeeController">
      Manager: {{employee.name}} [ {{department}} ]<br>
      Reports:
        <ul>
          <li ng-repeat="employee in employee.reports">
            {{employee.name}} [ {{department}} ]
          </li>
        </ul>
      <hr>
      {{greeting}}
    </div>
  </file>
</example>

Angular は、スコープがアタッチされたエレメントに、 `ng-scope` 
クラスを自動的に付加することに注目してください。
この例の `<style>` 定義は、新しいスコープの位置を赤枠でハイライトします。

子スコープ(内部の赤枠)は、`{{employee.name}}` expression を評価するために 
repeater が作成しますが、 expression が評価される子スコープによって、 
`{{employee.name}}` expression の評価結果は異なります。
(John Smith と Mary Run は、異なる子スコープで `{{employee.name}}` expression 
が評価された結果です。)

また、`{{department}}` の評価を行うときは、 `department` 
プロパティがルートスコープでしか定義されていないため、
ルートスコープからプロトタイプ継承されます。


## DOM からのスコープの取得

スコープは `$scope` data プロパティとして DOM にアタッチされていて、
デバッグの目的で取得することができます。
(アプリケーションの中でこのような方法を使ってスコープを取得しなければならないことは、
まずありえないでしょう。)
ルートスコープがアタッチされる DOM 要素は、 {@link api/ng.directive:ngApp `ng-app`} 
ディレクティブの位置によって決まります。たいていの場合、 `ng-app` は `<html>` 
要素に置かれますが、たとえば View の一部分のみを Angular がコントロールするような場合は、
別の要素に `ng-app` を置くことができます。

デバッガでスコープを調べるためには、次のようにします。

  1. ブラウザで、調査したい要素を右クリックし、「要素を検証」をクリックします。
     ブラウザのデバッガで、右クリックした要素がハイライトされるはずです。

  2. デバッグコンソールでは、選択した要素は `$0` 変数としてアクセスできます。

  3. アタッチされたスコープを取得するには、コンソールで `angular.element($0).scope()`
     を実行します。


## スコープイベントの伝播

DOM イベントと似た方法で、スコープはイベントを伝播することができます。
イベントは子スコープに {@link api/ng.$rootScope.Scope#$broadcast broadcast} することができ、
また、親スコープに {@link api/ng.$rootScope.Scope#$emit emit} することができます。

<example>
  <file name="script.js">
    function EventController($scope) {
      $scope.count = 0;
      $scope.$on('MyEvent', function() {
        $scope.count++;
      });
    }
  </file>
  <file name="index.html">
    <div ng-controller="EventController">
      Root scope <tt>MyEvent</tt> count: {{count}}
      <ul>
        <li ng-repeat="i in [1]" ng-controller="EventController">
          <button ng-click="$emit('MyEvent')">$emit('MyEvent')</button>
          <button ng-click="$broadcast('MyEvent')">$broadcast('MyEvent')</button>
          <br>
          Middle scope <tt>MyEvent</tt> count: {{count}}
          <ul>
            <li ng-repeat="item in [1, 2]" ng-controller="EventController">
              Leaf scope <tt>MyEvent</tt> count: {{count}}
            </li>
          </ul>
        </li>
      </ul>
    </div>
  </file>
</example>



## スコープのライフサイクル

ブラウザがイベントを受け取ったとき、イベントに対応する JavaScript 
のコールバック処理を実行し、コールバック処理が終了すれば、 DOM を再描画してリターンし、
次のイベントを待つ、というのが通常のフローです。

ブラウザが JavaScript を呼び出したとき、コードは Angular の実行コンテキスト外で動作します。
したがって、 Angular はモデルに変更があったことを知ることができません。
モデルの変更を正しく処理するためには、このプロセスが {@link
 api/ng.$rootScope.Scope#$apply `$apply`} メソッドを呼び出して Angular 
の実行コンテキストに入る必要があります。
Angular は `$apply` メソッド内で実行されたモデルの変更のみ適切に処理します。
たとえば、もしディレクティブが {@link api/ng.directive:ngClick `ng-click`} のような 
DOM イベントを listen している場合、 `$apply` メソッドの中で expression 
を評価しなければなりません。

expression を評価した後、 `$apply` メソッドは {@link 
api/ng.$rootScope.Scope#$digest `$digest`} を実行します。 `$digest` フェーズでは、
スコープがすべての `$watch` expression を検査し、それまでの値と比較します。
このダーティチェックは非同期で実行されます。
したがって、 `$scope.username="angular"` のような代入が行われても、ただちには `$watch` 
に通知されず、 `$digest` フェーズが実行されるまで遅延されます。
この遅延は意図的なもので、これにより、複数のモデル変更が 1 つの `$watch` への通知に集約され、
かつ、 他の `$watch` が動作しているしているときには、 `$watch` 
への通知が発生しないということが保証されます。
もし `$watch` がモデルの値を変更したときは、さらに `$digest` サイクルを行うことが強制されます。

  1. **スコープの生成**

     {@link api/ng.$rootScope ルートスコープ} がアプリケーションのブートストラップ中に 
     {@link api/AUTO.$injector $injector}によって生成されます。
     また、テンプレートのリンク中に、いくつかのディレクティブは新規の子スコープを生成します。

  2. **Watcher の登録**

     テンプレートのリンク中に、ディレクティブは {@link api/ng.$rootScope.Scope#$watch watch} 
     をスコープに登録します。これらの watch はモデルの値を DOM に伝播するために使われます。

  3. **モデルの変化**

     プロパティの変化を適切に検知するため、プロパティへの変更は 
     {@link api/ng.$rootScope.Scope#$apply scope.$apply()} の中でのみ行うようにしなければなりません。
     (Angular の API はこれを暗黙的に行なっているため、コントローラでの同期的処理や 
     {@link api/ng.$http $http} ・ {@link api/ng.$timeout $timeout} サービスを使った非同期処理で 
     `$apply` を呼び出す必要はありません。)

  4. **変化の検知**

     `$apply` の最後に、 Angular は {@link api/ng.$rootScope.Scope#$digest $digest} 
     処理をルートスコープに対して実行します。
     ルートスコープで `$digest` が実行されると、すべての子スコープにも伝播し、 
     `$digest` が実行されます。
     `$digest` 処理の中で、すべての `$watch` されている expression や関数について、
     モデルの変化がチェックされ、もし変化が検知されたら、 `$watch` のリスナが呼び出されます。

  5. **スコープの破棄**

     子スコープが不要になったら、子スコープの creator は、責任をもって 
     {@link api/ng.$rootScope.Scope#$destroy scope.$destroy()} API を呼び出し、
     それらを破棄しなければなりません。破棄することで、子スコープへの `$digest` 
     呼び出しの伝播を止めることができ、子スコープが使用していたメモリが、
     ガベージコレクタによって開放されます。


### スコープとディレクティブ

コンパイル処理中に、 {@link compiler コンパイラ} は DOM テンプレートから
{@link api/ng.$compileProvider#directive ディレクティブ} を検索します。
ディレクティブはたいてい次の 2 カテゴリのうちの 1 つに分類できます。

  - Observing {@link api/ng.$compileProvider#directive ディレクティブ}: 
    `{{expression}}` のようなディレクティブは、
    {@link api/ng.$rootScope.Scope#$watch $watch()} メソッドを使用してリスナを登録します。
    このタイプのディレクティブは、 `expression` が更新されたときに View を更新できるように、
    通知を受け取る必要があります。

  - Listener ディレクティブ: {@link api/ng.directive:ngClick ng-click} のようなディレクティブは、
    DOM にリスナを登録します。
    DOM リスナが呼び出されたとき、 Listener ディレクティブは関連付けられた expression を実行し、
    {@link api/ng.$rootScope.Scope#$apply $apply()} メソッドを使って View を更新します。

外部イベント (ユーザアクション・タイマー・XHRなど) を受け取ったとき、
スコープ内のすべてのリスナが適切に呼びだされるように、
{@link api/ng.$rootScope.Scope#$apply $apply()} メソッドを通じて、
関連付けられた {@link expression expression} をスコープに適用しなければなりません。


### スコープを作成するディレクティブ

多くの場合、{@link api/ng.$compileProvider#directive ディレクティブ} とスコープは連携しますが、
ディレクティブがスコープのインスタンスを新しく作成することは、あまりありません。
しかし、ディレクティブの中には、{@link api/ng.directive:ngController ng-controller} や 
{@link api/ng.directive:ngRepeat ng-repeat} のように、新しい子スコープを作成して対応する 
DOM 要素にアタッチするものもあります。
DOM 要素にアタッチされたスコープは、 `angular.element(aDomElement).scope()` 
メソッドを呼び出して取得することができます。


### コントローラとスコープ

スコープとディレクティブは、次のような場合に連携します。

   - テンプレートに対してコントローラのメソッドを公開するために、コントローラがスコープを使用する場合。
     ({@link api/ng.directive:ngController ng-controller} を参照)

   - モデル (スコープ内のプロパティ) を操作できるメソッド (ビヘイビア) を、コントローラが定義する場合。
   
   - コントローラがモデルに対して {@link api/ng.$rootScope.Scope#$watch watch} 
     を登録する場合。
     これらの watch は、コントローラのビヘイビアが実行された後すぐに実行されます。

詳しくは、 {@link api/ng.directive:ngController ng-controller} をご参照ください。


### スコープの `$watch` のパフォーマンスについて

スコープをダーティチェックし、プロパティが変化したかを調べる処理は Angular ではよく行うものなので、
効率的である必要があります。
注意しなければならないのは、ダーティーチェック処理が DOM アクセスを行わないようにすることです。
これは、DOM アクセスが JavaScript のプロパティへのアクセスに比べて桁違いに遅いためです。
