@ngdoc overview
@name フォーム
@description

`input`, `select`, `textarea` コントロールは、ユーザがデータを入力するための手段の 1 つです。
フォームは関連するコントロールを 1 つにまとめるための、コントロールの集合です。

フォームとコントロールは、バリデーションサービスを提供しているため、
ユーザは無効な入力をしたときに、通知を受けることができます。
こうすれば、ユーザはその場でフィードバックを受け取り、
どのように間違いを修正すればいいか知ることができるので、
よりよいユーザエクスペリエンスを提供することができます。
注意しなければいけないのは、
クライアントサイドのバリデーションはユーザエクスペリエンスを良くするために重要な役割を果たしますが、
簡単に迂回できてしまうので信頼できないということです。
セキュアなアプリケーションを構築するためには、サーバサイドのバリデーションはやはり必要です。


# 簡単なフォーム
双方向データバインディングを理解するために重要なディレクティブは
{@link api/ng.directive:ngModel ngModel} です。
`ngModel` ディレクティブは、モデルからビューにデータを同期し、
同時にビューからモデルにデータを同期することで、双方向データバインディングを提供します。
さらに、他のディレクティブが `ngModel` ディレクティブの振る舞いを補えるよう、
{@link api/ng.directive:ngModel.NgModelController API} が用意されています。

<doc:example>
<doc:source>
<div ng-controller="Controller">
  <form novalidate class="simple-form">
    Name: <input type="text" ng-model="user.name" /><br />
    E-mail: <input type="email" ng-model="user.email" /><br />
    Gender: <input type="radio" ng-model="user.gender" value="male" />male
    <input type="radio" ng-model="user.gender" value="female" />female<br />
    <button ng-click="reset()">RESET</button>
    <button ng-click="update(user)">SAVE</button>
  </form>
  <pre>form = {{user | json}}</pre>
  <pre>master = {{master | json}}</pre>
</div>

<script>
  function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      $scope.user = angular.copy($scope.master);
    };

    $scope.reset();
  }
  </script>
</doc:source>
</doc:example>


ここで、 `novalidate` はブラウザネイティブなバリデーションを無効にするために使われています。



# CSSのクラスを使う

コントロールやフォームのスタイルを変更できるよう、 `ngModel` は以下のクラスを追加します。

- `ng-valid`
- `ng-invalid`
- `ng-pristine`
- `ng-dirty`

以下の例は、CSSを使用して、それぞれのフォームコントロールの妥当性を表示します。
`user.name` と `user.email` は必須項目ですが、値が変更されてダーティーになったときだけ、
背景色が赤で表示されます。
したがって、ユーザがコントロールを操作をして妥当性を満たさなくなるまで、
エラー表示で気が散ることがありません。

<doc:example>
<doc:source>
<div ng-controller="Controller">
  <form novalidate class="css-form">
    Name:
      <input type="text" ng-model="user.name" required /><br />
    E-mail: <input type="email" ng-model="user.email" required /><br />
    Gender: <input type="radio" ng-model="user.gender" value="male" />male
    <input type="radio" ng-model="user.gender" value="female" />female<br />
    <button ng-click="reset()">RESET</button>
    <button ng-click="update(user)">SAVE</button>
  </form>
</div>

<style type="text/css">
  .css-form input.ng-invalid.ng-dirty {
    background-color: #FA787E;
  }

  .css-form input.ng-valid.ng-dirty {
    background-color: #78FA89;
  }
</style>

<script>
  function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      $scope.user = angular.copy($scope.master);
    };

    $scope.reset();
  }
  </script>
</doc:source>
</doc:example>



# フォームとコントロールの状態にバインドする

フォームは {@link api/ng.directive:form.FormController FormController} のインスタンスです。
フォームのインスタンスは、オプションで `name` 属性を使ってスコープ内部に公開することもできます。
同じように、コントロールは {@link api/ng.directive:ngModel.NgModelController NgModelController} 
のインスタンスで、 `name` 属性を使ってフォームのインスタンス内部に公開することができます。
これは、フォームやコントロールの内部状態は、ビューの中で標準的なバインディングプリミティブを使って、
バインドできるということでもあります。

これを使って、上記の例に次のような機能を拡張することができます。

- フォームに何らかの変更が加えられたときだけ、 RESET ボタンを有効にする
- フォームに何らかの変更が加えられ、その値が有効な場合だけ、 SAVE ボタンを有効にする
- `user.email` と `user.agree` に対するカスタムエラーメッセージを表示する

<doc:example>
<doc:source>
<div ng-controller="Controller">
  <form name="form" class="css-form" novalidate>
    Name:
      <input type="text" ng-model="user.name" name="uName" required /><br />
    E-mail:
      <input type="email" ng-model="user.email" name="uEmail" required/><br />
    <div ng-show="form.uEmail.$dirty && form.uEmail.$invalid">Invalid:
      <span ng-show="form.uEmail.$error.required">Tell us your email.</span>
      <span ng-show="form.uEmail.$error.email">This is not a valid email.</span>
    </div>

    Gender: <input type="radio" ng-model="user.gender" value="male" />male
    <input type="radio" ng-model="user.gender" value="female" />female<br />

    <input type="checkbox" ng-model="user.agree" name="userAgree" required />
    I agree: <input ng-show="user.agree" type="text" ng-model="user.agreeSign"
              required /><br />
    <div ng-show="!user.agree || !user.agreeSign">Please agree and sign.</div>

    <button ng-click="reset()" ng-disabled="isUnchanged(user)">RESET</button>
    <button ng-click="update(user)"
            ng-disabled="form.$invalid || isUnchanged(user)">SAVE</button>
  </form>
</div>

<script>
  function Controller($scope) {
    $scope.master= {};

    $scope.update = function(user) {
      $scope.master= angular.copy(user);
    };

    $scope.reset = function() {
      $scope.user = angular.copy($scope.master);
    };

    $scope.isUnchanged = function(user) {
      return angular.equals(user, $scope.master);
    };

    $scope.reset();
  }
</script>
</doc:source>
</doc:example>



# カスタムバリデーション

Angular には、 HTML5 で最もよく使われる {@link api/ng.directive:input input} type 
({@link api/ng.directive:input.text text}, {@link api/ng.directive:input.number number}, 
{@link api/ng.directive:input.url url}, {@link api/ng.directive:input.email email}, 
{@link api/ng.directive:input.radio radio}, {@link api/ng.directive:input.checkbox checkbox}) 
に対する基本的な実装が用意されています。
また、バリデーションのために用意されたディレクティブもあります 
(`required`, `pattern`, `minlength`, `maxlength`, `min`, `max`) 。

独自のバリデータを定義するには、 `ngModel` の {@link api/ng.directive:ngModel.NgModelController 
コントローラ} にカスタムバリデーション関数を追加する独自のディレクティブを定義します。
コントローラにアクセスできるようにするためには、下記の例で示すように、ディレクティブに依存関係を指定します。
定義したバリデーションは次の 2 つのときに実行されるようにすることができます。

  * **モデルの更新をビューに反映するとき** - バインドされたモデルに変更があったときは必ず、
	{@link api/ng.directive:ngModel.NgModelController#$formatters NgModelController#$formatters}
	配列に含まれるすべての関数が順番に実行されるため、これらの関数は値をフォーマットし、
	{@link api/ng.directive:ngModel.NgModelController#$setValidity NgModelController#$setValidity}
	を使ってフォームコントロールの有効状態を変更することができます。

  * **ビューの変更をモデルに反映するとき** - 同じような方法で、
	ユーザがコントロールに対して何らかの操作を行ったときは必ず
	{@link api/ng.directive:ngModel.NgModelController#$setViewValue NgModelController#$setViewValue}
	が呼び出されます。
	すると、{@link api/ng.directive:ngModel.NgModelController#$parsers NgModelController#$parsers}
	配列に含まれるすべての関数が順番に実行されるため、これらの関数は値を変換して、
	{@link api/ng.directive:ngModel.NgModelController#$setValidity NgModelController#$setValidity}
	を使ってフォームコントロールの有効状態を変更することができます。

次の例では、2 つのディレクティブを作成しています。

  * 最初のディレクティブは、 `integer` で、入力が有効な整数値であるかどうかを検証します。
	たとえば、 `1.23` は小数部を含むので無効な値です。
	ここで、配列に push するのではなく、配列を unshift していることに着目してください。
	これは、コントロールに入力された文字列値が数値に変換される前にバリデーション関数を実行できるよう、
	最初に入力値を読み取って処理を行いたいからです。

  * 2 つ目のディレクティブは `smart-float` で、 `1.2` と `1,2` の形式どちらでも、
	有効な float 値である `1.2` に変換します。
	ここで、 input type に `number` を使用できないことに注意してください。
	なぜなら、 HTML5 に対応したブラウザでは、 `1,2` のようにブラウザが数値として無効と判断するものは、
	ユーザが入力できないからです。


<doc:example module="form-example1">
<doc:source>
<div ng-controller="Controller">
  <form name="form" class="css-form" novalidate>
    <div>
      Size (integer 0 - 10):
      <input type="number" ng-model="size" name="size"
             min="0" max="10" integer />{{size}}<br />
      <span ng-show="form.size.$error.integer">This is not valid integer!</span>
      <span ng-show="form.size.$error.min || form.size.$error.max">
        The value must be in range 0 to 10!</span>
    </div>

    <div>
      Length (float):
      <input type="text" ng-model="length" name="length" smart-float />
      {{length}}<br />
      <span ng-show="form.length.$error.float">
        This is not a valid float number!</span>
    </div>
  </form>
</div>

<script>
  var app = angular.module('form-example1', []);

  var INTEGER_REGEXP = /^\-?\d*$/;
  app.directive('integer', function() {
    return {
      require: 'ngModel',
      link: function(scope, elm, attrs, ctrl) {
        ctrl.$parsers.unshift(function(viewValue) {
          if (INTEGER_REGEXP.test(viewValue)) {
            // 有効なとき
            ctrl.$setValidity('integer', true);
            return viewValue;
          } else {
            // 無効な値のとき、undefinedを返す(モデルは更新しない)
            ctrl.$setValidity('integer', false);
            return undefined;
          }
        });
      }
    };
  });

  var FLOAT_REGEXP = /^\-?\d+((\.|\,)\d+)?$/;
  app.directive('smartFloat', function() {
    return {
      require: 'ngModel',
      link: function(scope, elm, attrs, ctrl) {
        ctrl.$parsers.unshift(function(viewValue) {
          if (FLOAT_REGEXP.test(viewValue)) {
            ctrl.$setValidity('float', true);
            return parseFloat(viewValue.replace(',', '.'));
          } else {
            ctrl.$setValidity('float', false);
            return undefined;
          }
        });
      }
    };
  });
</script>
</doc:source>
</doc:example>


# `ngModel` を使ってカスタムフォームコントロールを実装する
Angular には HTML の基本的なコントロール ({@link api/ng.directive:input input}, 
{@link api/ng.directive:select select}, {@link api/ng.directive:textarea textarea}) 
はすべて実装されており、多くの場合はこれで十分です。
しかし、もっと柔軟性が必要な場合は、ディレクティブとして独自のフォームコントロールを記述することができます。

カスタムコントロールが `ngModel` と連携し、双方向データバインディングを実現するためには、
次のことをしなければなりません。

  - カスタムコントロールに `$render` メソッドを実装すること。このメソッドは 
  	{@link api/ng.directive:ngModel.NgModelController#$formatters NgModelController#$formatters}
  	を通過したあとのデータの描画を担当します。
  - ユーザがコントロールに対して何らかの操作を行い、モデルが更新されなければならないときは、
  	必ず `$setViewValue` メソッドを呼び出すこと。
  	これは大抵の場合、 DOM イベントリスナの中で行われます。

詳しくは、 {@link guide/directive $compileProvider.directive} を参照してください。

下記の例は、 contentEditable 要素に双方向データバインディングを追加する方法を示しています。

<doc:example module="form-example2">
<doc:source>
<script>
  angular.module('form-example2', []).directive('contenteditable', function() {
    return {
      require: 'ngModel',
      link: function(scope, elm, attrs, ctrl) {
        // ビュー -> モデル
        elm.bind('blur', function() {
          scope.$apply(function() {
            ctrl.$setViewValue(elm.html());
          });
        });

        // モデル -> ビュー
        ctrl.$render = function() {
          elm.html(ctrl.$viewValue);
        };

        // DOMから初期値を読み込む
        ctrl.$setViewValue(elm.html());
      }
    };
  });
</script>

<div contentEditable="true" ng-model="content" title="Click to edit">Some</div>
<pre>model = {{content}}</pre>

<style type="text/css">
  div[contentEditable] {
    cursor: pointer;
    background-color: #D0D0D0;
  }
</style>
</doc:source>
</doc:example>
