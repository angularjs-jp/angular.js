@ngdoc overview
@name 開発者向けガイド: HTMLコンパイラ
@description

# 概要

Angularの {@link api/ng.$compile HTMLコンパイラ} はブラウザに新たなHTMLの文法を伝えます。 このコンパイラは、
HTML要素や属性に振る舞いを与えたり、新しいHTML要素や属性を生成します。Angularではこれらの振る舞いを{@link
api/ng.$compileProvider#directive directives}と呼びます。

HTMLは宣言によって静的なドキュメントを形成する構造部品を多く持っています。 例えば、何かを中央に配置する必要が
あるとき、中央を検知して文字を中央寄せにするために、ウィンドウサイズを 半分に分割する命令は必要はありません。
単純に、`align="center"`を要素に追加すれば望んだ振る舞いが達成されます。そういったものが宣言型言語の特長です。

ですが、宣言型言語は制限があるので、新たな文法をブラウザに伝えることは許可されません。例えば、ブラウザに文字を
2分の1でなく3分の1の位置に寄せさせる方法は簡単にはありません。必要なことはブラウザに新たなHTMLの文法を伝える
手段です。

Angularはアプリケーションを構築するのに有用となる一般的なdirectiveが予めバンドルされています。また、あなたの
アプリケーションに特化したdirectivesを生成することも想定してあります。これらの拡張機能はアプリケーション構築の
ためのドメイン特化言語となります。

このコンパイルはすべてがウェブブラウザ内で起こります。サーバサイドや事前のコンパイルは含みません。


# コンパイラ

コンパイラはDOMを横断して属性を探すAngularのサービスです。コンパイルは2段階で起きます。

  1. **コンパイル:** DOMを横断し全てのdirectivesを集めます。その結果はリンクしている機能です。

  2. **リンク:** directivesをスコープと連結し、ライブビューを生み出します。スコープのモデルにおける 全ての
  変更はビューに反映され、全てのユーザのビューにおける操作はスコープのモデルに反映されます。これがスコープの
  モデルの唯一真実の源になります。

{@link api/ng.directive:ngRepeat `ng-repeat`}のようなdirectivesのいくつかは、collectionの各項目に応じてDOM要素を
一度クローンします。コンパイルとリンクは、クローンされたテンプレートを一度だけコンパイルすれば良く、そこでインスタンス
毎に一度リンクすればよいのでパフォーマンスを改善します。


# ディレクティブ

ディレクティブは、コンパイルの過程で特別なHTMLを構築する場面でトリガーさせておくべき振る舞いです。
ディレクティブは、要素の名前にも属性にもclass名にもコメントにさえも配置できます。以下は、{@link
api/ng.directive:ngBind `ng-bind`}ディレクティブを呼び出すのと同様のある用例です。

<pre>
  <span ng-bind="exp"></span>
  <span class="ng-bind: exp;"></span>
  <ng-bind></ng-bind>
  <!-- directive: ng-bind exp -->
</pre>

ディレクティブはDOMにおいてコンパイラが呼ばれたときに実行される機能です。 ディレクティブをどのように記述
するかを深く知るには{@link api/ng.$compileProvider#directive directive API}を 読んでください。

以下はどんな要素でもドラッグ可能にしたディレクティブです。`<span>`要素の`draggable`属性をみてください。

<example module="drag">
  <file name="script.js">
    angular.module('drag', []).
      directive('draggable', function($document) {
        var startX=0, startY=0, x = 0, y = 0;
        return function(scope, element, attr) {
          element.css({
           position: 'relative',
           border: '1px solid red',
           backgroundColor: 'lightgrey',
           cursor: 'pointer'
          });
          element.bind('mousedown', function(event) {
            startX = event.screenX - x;
            startY = event.screenY - y;
            $document.bind('mousemove', mousemove);
            $document.bind('mouseup', mouseup);
          });

          function mousemove(event) {
            y = event.screenY - startY;
            x = event.screenX - startX;
            element.css({
              top: y + 'px',
              left:  x + 'px'
            });
          }

          function mouseup() {
            $document.unbind('mousemove', mousemove);
            $document.unbind('mouseup', mouseup);
          }
        }
      });
  </file>
  <file name="index.html">
    <span draggable>ドラッグしてください</span>
  </file>
</example>


どの要素にでも`draggable`属性を与えることはその要素の新たな振る舞いです。このアプローチの美しさは、新しいトリックを
ブラウザに教えることにあります。私たちはHTMLの原理に親しんだ誰にでも自然な方法で、ブラウザが理解できる語彙を増やしました。


# ビューの理解

テンプレートエンジンは数多く存在します。その多くは新たな文字列を表示するのに、静的な文字列のテンプレートを使い、
データと結合します。表示された文字列は要素の`innerHTML`となります。

<img src="img/One_Way_Data_Binding.png">

これは、データへの変更がテンプレートと再度マージし、DOMに対して`innerHTML`を実行する必要があることを意味します。
この手法の幾つかの問題: ユーザーが入力した情報の読み込みとデータとのマージ、ユーザーの入力した情報の上書き、全ての更新
手続きの管理、振る舞いの表現力の欠如。

Angularは違います。Angularのコンパイラは文字列のテンプレートではなくDOMをディレクティブと一緒に使います。その結果は、
ライブビューにおけるスコープのモデルと結合した際の、リンクしている機能です。ビューとスコープのモデルのバインディング
は明白なものです。開発者はビューの更新のために何ら行動をとる必要はありません。`innerHTML`が使われないことはユーザーの
入力を上書きする問題がないことを意味します。さらに、Angularのdirectivesはテキストのバインディングだけでなく、振る舞いの
構成も同様に含みます。
<img src="img/Two_Way_Data_Binding.png">

Angularのアプローチは安定したDOMを生み出します。それはDOM要素のインスタンスをモデル要素のインスタンスにバインドする
ことによって、そのバインディングの生存期間を変更しないことを意味しています。これはコードが要素を取得し、イベント
ハンドラを登録し、参照することがテンプレートのデータをマージによって破壊されないことを意味します。
