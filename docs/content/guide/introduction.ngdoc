@ngdoc overview
@name Developer Guide: イントロダクション
@description

Angular はピュアなクライアントサイドテクノロジで、すべて Javascript で書かれています。
Angular は古くからある Web のテクノロジ (HTML, CSS, Javascript) と連携し、 
Web アプリケーション開発をいままでより簡単に、迅速にすることができます。

Angular が Web 開発をシンプルにしている重要な方法の 1 つは、
低レベルな Web アプリケーション開発タスクと、
開発者との間の抽象化の度合いを上げていることです。
Angular は自動的に下記のタスクの大部分の面倒を見てくれます。

  * DOM 操作
  * Listeners と Notifiers のセットアップ
  * 入力のバリデーション

Angular がこのようなタスクの面倒を見るので、
開発者はアプリケーションロジックの開発に集中でき、
同じことの繰り返しで、エラーのもとになる、低レベルな処理のコードに気を配らなくてよくなります。

Web アプリケーション開発をシンプルなものにするのと同時に、 Angular はクライアントサイドに、
比較的洗練された技術をもたらします。

  * データと、アプリケーションロジック、それからプレゼンテーションコンポーネントの分離
  * データとプレゼンテーションコンポーネントのデータバインディング
  * Service (代用可能なオブジェクトとして実装された、共通の Web アプリケーション処理)
  * 依存性注入(主に複数のサービスを連携させるために使用)
  * 拡張可能な HTML コンパイラ(完全に JavaScript のみで記述)
  * テスト容易性

これらの技術は、長い間クライアントサイドには存在しませんでした。

## シングルページアプリケーションと画面遷移型アプリケーション

Angular はシングルページアプリケーションの開発にも、
画面遷移型アプリケーションの開発にも使うことができますが、
主にシングルページアプリケーションの開発のために設計されています。
Angular はシングルページアプリケーションでも、
ブラウザ履歴や戻る / 進むボタン、そしてブックマークをサポートしています。

通常、ページが変化するごとに Angular をロードするようなことは、あまりないでしょう。
しかし、ページ遷移型アプリケーションの場合はそうすることになるでしょう。
また、 Angular の機能の一部 
(たとえば Angular のデータバインディング機能を使ったテンプレートなど)を、
既存のページ遷移型アプリケーションに追加する場合も、
ページが遷移するたびに Angular をロードし直すことになるでしょう。
古いアプリケーションをシングルページの Angular 
アプリケーションに移行する場合も、このようなプロセスを経るかもしれません。
