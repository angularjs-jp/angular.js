@ngdoc overview
@name ディレクティブ
@description

ディレクティブは、 HTML に新たな芸当を教えるための手段です。
DOM のコンパイル中に、ディレクティブは HTML から抽出され、実行されます。
このようにすることで、ディレクティブはふるまいを登録したり、 
DOM を変更したりできるようになります。

Angular には Web アプリケーションを構築するのに便利なディレクティブが組み込まれていますが、
拡張することで、 HTML を宣言型のドメイン固有言語 (Domain Specific Language; DSL) 
に変えてしまうこともできます。

# HTML からディレクティブを呼び出す

ディレクティブは `ngBind` のようなキャメルケースの名前を持っています。
このようなキャメルケースの名前を `:`、 `-`、`_` の特殊文字を使ってスネークケースに変換すると、
ディレクティブを呼び出すことができます。
また、ディレクティブには `x-` や `data-` プレフィックスをつけて HTML 
バリデータをパスするようにすることもできます。
有効なディレクティブの名前をいくつか列挙します: 
`ng:bind`, `ng-bind`, `ng_bind`, `x-ng-bind`, `data-ng-bind`

ディレクティブは、要素の名前・属性・クラス名・コメントとして記述できます。
次のコードは `myDir` ディレクティブを呼び出す方法のいくつかの例です。
(ただし、多くのディレクティブは、属性としてのみ呼び出せるようになっています。)

<pre>
  <span my-dir="exp"></span>
  <span class="my-dir: exp;"></span>
  <my-dir></my-dir>
  <!-- directive: my-dir exp -->
</pre>

ディレクティブは多くの方法で呼び出すことができますが、結局は下記の例と同等です。

<doc:example>
  <doc:source >
   <script>
     function Ctrl1($scope) {
       $scope.name = 'angular';
     }
   </script>
   <div ng-controller="Ctrl1">
     Hello <input ng-model='name'> <hr/>
     &ltspan ng:bind="name"&gt <span ng:bind="name"></span> <br/>
     &ltspan ng_bind="name"&gt <span ng_bind="name"></span> <br/>
     &ltspan ng-bind="name"&gt <span ng-bind="name"></span> <br/>
     &ltspan data-ng-bind="name"&gt <span data-ng-bind="name"></span> <br/>
     &ltspan x-ng-bind="name"&gt <span x-ng-bind="name"></span> <br/>
   </div>
  </doc:source>
  <doc:scenario>
    it('should show off bindings', function() {
      expect(element('div[ng-controller="Ctrl1"] span[ng-bind]').text()).toBe('angular');
    });
  </doc:scenario>
</doc:example>

# 文字列の展開

コンパイルプロセス中に、{@link api/ng.$compile コンパイラ} はテキストと属性を検索し、
{@link api/ng.$interpolate $interpolate} サービスを使用して expression 
が埋め込まれているかをチェックします。
見つかった expression は {@link api/ng.$rootScope.Scope#$watch watch} として登録され、
通常の {@link api/ng.$rootScope.Scope#$digest digest} サイクルで更新されます。
次のコードは、展開の例を示しています。

<pre>
<a href="img/{{username}}.jpg">Hello {{username}}!</a>
</pre>

# コンパイルプロセスとディレクティブのマッチ

HTML のコンパイルは次の 3 段階で行われます。

  1. 最初に、ブラウザの標準 API により、 HTML はパースされて DOM になります。
     テンプレートはパース可能な HTML でなければならないため、この点は重要です。
     多くのテンプレートシステムが DOM 要素に対してではなく文字列に対して操作を行うのとは対照的です。

  2. {@link api/ng.$compile $compile()} メソッドが呼び出され、 DOM のコンパイルが行われます。
     このメソッドでは、 DOM をたどり、ディレクティブを検出します。
     もし、ディレクティブが検出されると、その DOM 
     要素に関連付けられたディレクティブのリストに追加されます。
     DOM 要素に含まれるすべてのディレクティブが特定されると、それらは優先度で順位付けされ、
     それぞれの `compile()` 関数が実行されます。
     ディレクティブの compile 関数は、 DOM 構造を操作することができ、次に説明する `link()` 
     関数を生成する責任を負っています。
     {@link api/ng.$compile $compile()} メソッドは、各ディレクティブの compile 
     関数が返したリンク関数を結合し、リンク関数の集合を返します。

  3. 前のステップで返ってきたリンク関数を呼び出し、テンプレートとスコープをリンクします。
     このとき、個別のディレクティブのリンク関数を順に呼び出し、
     要素へのリスナの登録や {@link api/ng.$rootScope.Scope スコープ} への
     {@link api/ng.$rootScope.Scope#$watch watch} のセットアップを各ディレクティブに行わせます。
     その結果、スコープと DOM がリアルタイムバインドされた状態になり、
     スコープへの変更は DOM に反映されるようになります。

<pre>
  var $compile = ...; // コードに注入されます
  var scope = ...;

  var html = '<div ng-bind='exp'></div>';

  // Step 1: HTML をパースして DOM 要素に
  var template = angular.element(html);

  // Step 2: テンプレートのコンパイル
  var linkFn = $compile(template);

  // Step 3: コンパイルされたテンプレートとスコープをリンク
  linkFn(scope);
</pre>

## コンパイルとリンクが分かれている理由

この時点で、なぜコンパイルプロセスがコンパイルとリンクフェーズに分かれているのか疑問に思われるかもしれません。
これを理解するために、 repeater を使った実例を見てみましょう。

<pre>
  Hello {{user}}, you have these actions:
  <ul>
    <li ng-repeat="action in user.actions">
      {{action.description}}
    </li>
  </ul>
</pre>

repeater の場合のように、モデルでの変更が DOM 構造の変化を起こす場合は、
常にコンパイルフェーズとリンクフェーズを分けておく必要がある、というのが簡潔な答えです。

上記のサンプルコードがコンパイルされるとき、
コンパイラはすべてのノードをチェックしてディレクティブを探します。
`{{user}}` は {@link api/ng.$interpolate interpolation} ディレクティブの例で、
{@link api/ng.directive:ngRepeat ngRepeat} はまた別のディレクティブです。
しかし、 {@link api/ng.directive:ngRepeat ngRepeat} はあるジレンマを抱えています。
`ngRepeat` は、 `user.actions` に含まれるすべての `action` について、`li` 
要素を高速に出力できなければなりません。
したがって、 `ngRepeat` は複製のためのクリーンな状態の `li` 要素を保持しておき、
新しい `action` が挿入されたら、テンプレートの `li` 要素を複製して、 
`ul` に挿入しなければなりません。
しかし、 `li` 要素を複製するだけでは十分ではなく、 `li` をコンパイルして、その中に含まれる 
`{{action.descriptions}}` のようなディレクティブを正しい {@link 
api/ng.$rootScope.Scope スコープ} で評価しなければなりません。
簡単な実装としては、 `li` 要素のコピーを単純に挿入し、
コンパイルすることもできるでしょう。
しかし、コンパイルするためにすべての DOM ツリーを辿り、ディレクティブを探して実行しなければならず、 
`li` 要素の複製を毎回コンパイルすると遅くなってしまいます。もし、 100 アイテムを展開しなければならない 
repeater の中でコンパイルを行うと、すぐにパフォーマンスの問題が発生するでしょう。

このジレンマの解決方法が、コンパイルプロセスを 2 段階に分け、
コンパイルフェーズではすべてのディレクティブを特定して優先度でソートし、
リンクフェーズでは {@link api/ng.$rootScope.Scope スコープ} のインスタンスと `li` インスタンスをリンクする、
というものなのです。

{@link api/ng.directive:ngRepeat ngRepeat} はコンパイルプロセスが 
通常通り `li` 要素を処理しないようにすることでうまく動作しています。
その代わり、{@link api/ng.directive:ngRepeat ngRepeat} ディレクティブは
`li` 要素を別のやり方でコンパイルします。
`li` 要素をコンパイルした結果は `li` 
要素に含まれるすべてのディレクティブを含むリンク関数になっており、
`li` 要素の複製にアタッチできる状態になっています。
実行時には、 {@link api/ng.directive:ngRepeat ngRepeat} は expression を watch し、
配列にアイテムが追加されたら `li` 要素を複製し、
複製した要素のための新しい {@link api/ng.$rootScope.Scope スコープ} を生成し、
最後に複製した要素に対してリンク関数を呼び出します。

まとめ:

  * *コンパイル関数* - ディレクティブの多くは、特定の DOM 要素のインスタンスで動作するようにできており、
    テンプレートの DOM 要素を書き換えることはあまりないため、
    ディレクティブにおけるコンパイル関数は比較的少ないです。
    ディレクティブのインスタンス間で共通の処理は、
    パフォーマンス維持のためにコンパイル関数に移動させるべきです。

  * *リンク関数* - ディレクティブがリンク関数を持たないことはほぼありません。
    リンク関数により、ディレクティブは複製された DOM 要素インスタンスにリスナを登録することができ、
    同時にスコープから DOM にコンテンツをコピーすることができます。


# ディレクティブの作成 (ショートバージョン)

この例では、現在時刻を表示するディレクティブを作成します。

<doc:example module="time">
  <doc:source>
   <script>
     function Ctrl2($scope) {
       $scope.format = 'M/d/yy h:mm:ss a';
     }

     angular.module('time', [])
       // 'myCurrentTime' ディレクティブの factory メソッドを登録します。
       // factory メソッドは DI なので、$timeout と dateFilter を注入します。
       .directive('myCurrentTime', function($timeout, dateFilter) {
         // ディレクティブのリンク関数を返します。(コンパイル関数は不要です。)
         return function(scope, element, attrs) {
           var format,  // 日付のフォーマット
               timeoutId; // timeoutId (時刻の更新をキャンセルできるようにするため)

           // UI を更新するために使う関数
           function updateTime() {
             element.text(dateFilter(new Date(), format));
           }

           // expression を watch し、変更があったときは UI を更新します
           scope.$watch(attrs.myCurrentTime, function(value) {
             format = value;
             updateTime();
           });

           // 1 秒後に更新するようにスケジュールします
           function updateLater() {
             // キャンセルできるよう、 timeoutId を保持します
             timeoutId = $timeout(function() {
               updateTime(); // DOM を更新
               updateLater(); // 次の更新をスケジュール
             }, 1000);
           }

           // DOM 破棄(削除)イベントをリスンし、 DOM 要素が削除されたあとに
           // 時刻を更新しないように、次の更新をキャンセルします
           element.bind('$destroy', function() {
             $timeout.cancel(timeoutId);
           });

           updateLater(); // UI の更新プロセスをスタートさせます
         }
       });
   </script>
   <div ng-controller="Ctrl2">
     Date format: <input ng-model="format"> <hr/>
     Current time is: <span my-current-time="format"></span>
   </div>
  </doc:source>
</doc:example>


# ディレクティブの作成 (ロングバージョン)

次のサンプルコードはディレクティブのスケルトンです。

<pre>
  var myModule = angular.module(...);

  myModule.directive('directiveName', function factory(injectables) {
    var directiveDefinitionObject = {
      priority: 0,
      template: '<div></div>',
      templateUrl: 'directive.html',
      replace: false,
      transclude: false,
      restrict: 'A',
      scope: false,
      compile: function compile(tElement, tAttrs, transclude) {
        return {
          pre: function preLink(scope, iElement, iAttrs, controller) { ... },
          post: function postLink(scope, iElement, iAttrs, controller) { ... }
        }
      },
      link: function postLink(scope, iElement, iAttrs) { ... }
    };
    return directiveDefinitionObject;
  });
</pre>

ほとんどのケースでは、ここまで詳細な設定は不要なので、上記のコードはもっとシンプルにできます。
このスケルトンの各パーツは以降の節で説明しますが、この節では、ほんの一部のみに注目します。

このコードをシンプルにする最初のステップは、デフォルト値にたよることです。
すると、上記のコードは、このようにシンプルになります。

<pre>
  var myModule = angular.module(...);

  myModule.directive('directiveName', function factory(injectables) {
    var directiveDefinitionObject = {
      compile: function compile(tElement, tAttrs) {
        return function postLink(scope, iElement, iAttrs) { ... }
      }
    };
    return directiveDefinitionObject;
  });
</pre>

ほとんどのディレクティブではテンプレートの変換を気にすることはなく、
インスタンスのみを気にすればよいため、さらにシンプルになります。

<pre>
  var myModule = angular.module(...);

  myModule.directive('directiveName', function factory(injectables) {
    return function postLink(scope, iElement, iAttrs) { ... }
  });
</pre>


## factory メソッド

factory メソッドはディレクティブの作成を担当します。
{@link api/ng.$compile compiler} がディレクティブを最初に検出したときのみ、 
factory メソッドは実行されます。このときあらゆる初期化処理を実行を実行できます。
factory メソッドは {@link api/AUTO.$injector#invoke $injector.invoke} 使って呼び出されるため、
注入アノテーションのルールすべてに従うように、依存性の注入を受けることができます。

## ディレクティブ定義オブジェクト

ディレクティブ定義オブジェクトは、 {@link api/ng.$compile コンパイラ} に指示を与えます。
属性は下記の通りです。

  * `name` - カレントスコープの名前です。この属性はオプションで、デフォルトは登録時の名前です。

  * `priority` - 1 つの DOM 要素に対して複数のディレクティブが宣言されたとき、
    ディレクティブを適用する順序を指定しなければならないことがあります。
    `priority` 属性は、ディレクティブの `compile` 関数を呼び出す順序を決めるために使用されます。
    `priority` の値が高いものから順に呼び出され、同じ値を持つ場合の実行順序は不定です。

  * `terminal` - この属性が `true` のとき、現在の priority 
    が最後に実行されるディレクティブのセットになります。 
    (同じプライオリティ値を持つディレクティブの実行順序は定義されていないので、
    このディレクティブと同じ `priority` 値を持つディレクティブは実行される可能性があります。)

  * `scope` - 次の値を設定することができます。

    * `true` - このディレクティブ用の新しいスコープが作成されます。
      もし同じ要素の複数のディレクティブが新しいスコープの作成を要求した場合は、 
      1 つだけ新しいスコープが作成されます。テンプレートのルートには必ずスコープが存在するため、
      このような新しいスコープの作成ルールは、テンプレートのルートには適用されません。

    * `{}` (オブジェクトハッシュ) - '隔離された' スコープが作成されます。
      このスコープは通常のスコープと異なり、親スコープからプロトタイプ継承を行いません。
      これは、再利用可能なコンポーネントを作成するときに便利で、こうしておけば、
      親スコープのデータを意図せず読み書きしてしまうことがなくなります。<br/>
      '隔離された' スコープは、
      親スコープから継承すべきローカルスコープのプロパティを定義するオブジェクトハッシュを受け取ります。
      これらのローカルプロパティは、値のエイリアスを作成してテンプレートに使わせるときに便利です。
      ローカルプロパティの定義は、ローカルスコープのプロパティからそのソースへのハッシュです。

      * `@` または `@attr` - ローカルスコーププロパティを DOM 属性の値にバインドします。
      	DOM 属性は文字列なので、結果は必ず文字列になります。
		`attr` が指定されなければ、属性名はローカルスコーププロパティの名前と同じであるとみなされます。
		`<widget my-attr="hello {{name}}">` というウィジェットのディレクティブと、
		ウィジェットのローカルスコーププロパティが `scope: { localName:'@myAttr' }` と定義されているとき、
		`localName` には `hello {{name}}` の `{{name}}` が展開された値が反映されます。
		`name` 属性が変更されたとき、ウィジェットのローカルスコープの `localName` 
		プロパティも変更されます。 `name` は、ウィジェットのローカルスコープではなく、
		親スコープから読み取られます。

      * `=` または `=attr` - `attr` 属性に指定された名前の、
      	ローカルスコーププロパティと親スコーププロパティ間の双方向バインディングを確立します。
		`attr` が指定されなければ、属性名はローカルスコーププロパティの名前と同じであるとみなされます。
		`<widget my-attr="parentModel">` というウィジェットのディレクティブと、
		ウィジェットのローカルスコーププロパティが `scope: { localModel:'=myAttr' }` と定義されているとき、
		`localModel` は 親スコープの `parentModel` の値が反映されます。
		`parentModel` への変更はすべて `localModel` にも反映され、
		`localModel` への変更はすべて `parentModel` にも反映されます。

      * `&` または `&attr` - expression を親スコープのコンテキストで実行する手段を提供します。
	  	`attr` が指定されなければ、属性名はローカルスコーププロパティの名前と同じであるとみなされます。
		`<widget my-attr="count = count + value">` というウィジェットのディレクティブと、
		ウィジェットのローカルスコーププロパティが `scope: { localFn:'&myAttr' }` と定義されているとき、
		ローカルスコーププロパティの `localFn` は `count = count + value` expression 
		を評価する関数のラッパを指します。
		expression を通じてローカルスコープから親スコープにデータを受け渡ししたい状況はよく発生しますが、
		これは、ローカル変数の名前と値を expression のラッパ関数に渡すことで実現できます。
		たとえば、 expression が `increment(amount)` のとき、 `localFn({amount: 22})` のように、
		amount の値を指定して `localFn` を呼び出すことができます。
	
  * `controller` - コントローラのコンストラクタ関数です。
    コントローラはリンクフェーズの直前にインスタンス化され、
    名前が指定されれば他のディレクティブ間でも共有されます (`require` 属性を参照)。
    こうすることで、ディレクティブ同士でコミュニーケーションを行うことができ、
    お互いの動作を補完しあうことができます。
    コントローラには、下記のローカル変数を注入することができます。

    * `$scope` - 要素に関連付けられたスコープ
    * `$element` - 現在のエレメント
    * `$attrs` - 要素の現在の属性
    * `$transclude` - 適切な transclude スコープに事前にバインドされた transclude リンク関数 : 
      `function(cloneLinkingFn)`

  * `require` - 現在のディレクティブのリンク関数に別のコントローラを渡します。
    `require` はディレクティブのコントローラの名前を 1 つ受け取ります。
    もしそのような名前のコントローラが見つからない場合は、エラーになります。
    コントローラの名前には次のプレフィックスをつけることができます。

    * `?` - エラーを発生させません。また、依存性はオプションになります。
    * `^` - 親要素のコントローラも検索対象にします。

  * `restrict` - ディレクティブの修飾方法を限定する、 `EACM` 
    のいずれかの文字を組み合わせた文字列です。省略すると、
    ディレクティブは要素の属性によってのみ指定出来ます。

    * `E` - 要素名: `<my-directive></my-directive>`
    * `A` - 属性: `<div my-directive="exp"></div>`
    * `C` - クラス: `<div class="my-directive: exp;"></div>`
    * `M` - コメント: `<!-- directive: my-directive exp -->`

  * `template` - 現在の要素を置き換える HTML です。
    置き換えのプロセスにより、古い要素の属性・クラスは新しい要素に引き継がれます。
    詳しくは下記の「ウィジェットの作成」を参照してください。

  * `templateUrl` - `template` と同等ですが、 HTML は指定された URL からロードされます。
    テンプレートの読み込みは非同期で行われるため、テンプレートの読み込みが完了するまで、
    コンパイルとリンク処理は中断されます。

  * `replace` - `true` のとき、現在の要素に template の HTML を追加するのではなく、
    現在の要素が template の HTML で置き換えられます。

  * `transclude` - 要素の内容をコンパイルして、その結果をディレクティブから利用可能にします。
    基本的に {@link api/ng.directive:ngTransclude ngTransclude} と合わせて使用します。
    transclude を行うことのメリットは、リンク関数が、適切なスコープに事前にバインドされた 
    transclude 関数を受け取ることができるということです。
    通常、ウィジェットは '隔離された' スコープを作成しますが、transclude は子スコープではなく、
    '隔離された' スコープと同階層のスコープです。
    transclude を使用することで、ウィジェットはプライベートな状態を保持することができ、
    transclude は (隔離される前の) 親スコープにバインドされます。

    * `true` - ディレクティブの内容を transclude します。
    * `'element'` - 低い優先度で定義されたディレクティブを含め、すべての要素を transclude します。

  * `compile`: 次の節で説明するコンパイル関数です。

  * `link`: 以降の節で説明するリンク関数です。このプロパティは、 `compile` 
    プロパティが定義されていないときのみ使用します。

## コンパイル関数

<pre>
  function compile(tElement, tAttrs, transclude) { ... }
</pre>

コンパイル関数は、テンプレートの DOM を変換する処理を行います。
多くのディレクティブはテンプレートの変換を行わないため、コンパイル関数はあまり使われません。
コンパイル関数を使用する例としては、{@link api/ng.directive:ngRepeat ngRepeat} のように、
テンプレートの DOM を変換するディレクティブや、 {@link api/ng.directive:ngView ngView} 
のようにコンテンツを非同期でロードするディレクティブがあります。
コンパイル関数は次の引数を受け取ります。

  * `tElement` - テンプレートの要素 - ディレクティブが宣言された要素です。
    この要素と子要素に対してのみ、安全にテンプレートの変換が行えます。

  * `tAttrs` - テンプレートの属性 - この要素に宣言された属性の正規化されたリストで、
    すべてのディレクティブのコンパイル関数で共有されます。{@link
    guide/directive#Attributes Attributes}を参照してください。

  * `transclude` - transclude リンク関数です。: `function(scope, cloneLinkingFn)`

備考: テンプレートが複製された場合は、
テンプレートインスタンスとリンクインスタンスが別のオブジェクトであることがありえます。
したがって、 DOM の複製に適用しなければならない変換以外の処理をコンパイル関数で行うのは危険です。
特に、DOM リスナの登録はコンパイル関数ではなく、リンク関数で行うべきです。

コンパイル関数は、関数またはオブジェクトを返します。

* 関数を返す場合 - 設定オブジェクトのコンパイル関数が空のときに、`link` 
  プロパティにリンク関数を登録するのと同等です。

* `pre` や `post` プロパティに関数を登録したオブジェクトを返す場合 - 
  リンクフェーズでリンク関数が呼び出されるタイミングを制御することができます。
  詳しくは下記の pre-link と post-link 関数を参照してください。


## リンク関数

<pre>
  function link(scope, iElement, iAttrs, controller) { ... }
</pre>

リンク関数は、 DOM リスナの登録と DOM の更新の役割を果たします。
リンク関数はテンプレートが複製された後、実行されます。
ここにディレクティブのロジックのほとんどを書きます。

  * `scope` - {@link api/ng.$rootScope.Scope スコープ} - ディレクティブが
    {@link api/ng.$rootScope.Scope#$watch watch} を登録するときに使用するスコープです。

  * `iElement` - 要素のインスタンス - ディレクティブが使用される要素です。
    この要素の子要素を操作する場合は、リンクが完了している段階の `postLink` 関数でのみ、
    問題なく行うことができます。

  * `iAttrs` - 属性のインスタンス - この要素に宣言されたすべての属性の正規化されたリストで、
    すべてのディレクティブのリンク関数で共有されます。{@link
    guide/directive#Attributes Attributes}を参照してください。

  * `controller` - コントローラのインスタンス - 要素に宣言されたディレクティブのうち、
    1 つでもコントローラを定義していれば、コントローラのインスタンスが入ります。
    コントローラのインスタンスはすべてのディレクティブで共有され、
    ディレクティブ間のコミュニケーションチャネルとして使うことができます。


### pre-link 関数

子要素がリンクされる前に実行されます。
コンパイラのリンク関数がリンクのための適切な要素を見つけることができなくなるため、
ここで DOM 変換を行うのは危険です。

### post-link 関数

子要素のリンクが完了した後実行されます。
ここでは DOM 変換を行なっても問題ありません。

<a name="Attributes"></a>
## Attributes オブジェクト

{@link api/ng.$compile.directive.Attributes Attributes} オブジェクトは、link() または compile() 
関数のパラメータとして渡され、下記のデータにアクセスする手段になります。

  * *正規化された属性名:* `ngBind` のようなディレクティブは、
    `ng:bind` や `x-ng-bind` などの複数の記法で表現できるため、
    attributes オブジェクトを使うことで、正規化された属性にアクセスすることができます。

  * *ディレクティブ間通信:* すべてのディレクティブが同じ attributes オブジェクトを共有しているので、
    各ディレクティブは attributes オブジェクトをディレクティブ間通信に使用することができます。

  * *展開のサポート:* 展開された属性を attributes オブジェクトに割り当てることができるので、
    他のディレクティブは補完された値を読み取ることができます。

  * *展開された属性の監視:* `src="{{bar}}"` のように展開を含む属性の値を監視するには、 `$observe` 
    を使います。これは非常に効率的であるだけでなく、リンクフェーズでは展開文字列はまだ評価されず、
    値が undefined なので、 `$observe` を使わなければ実際の値は簡単には取得できないのです。


<pre>
function linkingFn(scope, elm, attrs, ctrl) {
  // 属性の値を取得
  console.log(attrs.ngModel);

  // 属性の値を変更
  attrs.$set('ngModel', 'new value');

  // 展開文字列を含む属性の値を監視
  attrs.$observe('ngModel', function(value) {
    console.log('ngModel has changed value to ' + value);
  });
}
</pre>


# transclude とスコープについて

再利用可能なコンポーネントを作成したいと思うことはよくあります。
下記の擬似コードはシンプルなダイアログコンポーネントがどのように動作するかを示すためのものです。

<pre>
  <div>
    <button ng-click="show=true">show</button>
    <dialog title="Hello {{username}}."
            visible="show"
            on-cancel="show = false"
            on-ok="show = false; doSomething()">
       Body goes here: {{username}} is {{title}}.
    </dialog>
  </div>
</pre>

"show" ボタンをクリックするとダイアログが開きます。
ダイアログにはタイトルがあって `username` にデータバインドされ、
ダイアログに transclude したいボディがあります。

`dialog` ウィジェットのテンプレート定義はこのように実装します。

<pre>
  <div ng-show="visible">
    <h3>{{title}}</h3>
    <div class="body" ng-transclude></div>
    <div class="footer">
      <button ng-click="onOk()">Save changes</button>
      <button ng-click="onCancel()">Close</button>
    </div>
  </div>
</pre>

スコープのおまじないをしなければ、このダイアログは正常に描画されません。

まず最初に解決しなければならない問題は、ダイアログボックスのテンプレートには `title` 
が定義されている必要がありながら、インスタンス化するときには `username` 
をバインドしなければならないということです。
さらに、各ボタンはスコープ内に `onOk` と `onCancel` 関数が存在しなければ動作しません。
これではウィジェットの利便性が制限されてしまいます。
このようなマッピングの問題を解決するために、次のようにローカル変数を使って、
テンプレートに必要なローカル変数を生成します。

<pre>
  scope: {
    title: '@',             // title は親要素にデータバインドする
    onOk: '&',              // onOk 関数の delegate を作成する
    onCancel: '&',          // onCancel 関数の delegate を作成する
    visible: '='            // visible 属性でデータバインドが使えるようにする
  }
</pre>

ウィジェットスコープにローカルプロパティを作成すると、次の 2 点の問題が発生します。

  1. 独立性 - ユーザがダイアログウィジェットの `title` 属性をセットし忘れると、
     テンプレートは親スコープのプロパティにバインドしてしまいます。
     これは予期しないもので、望ましくありません。

  2. transclude - transclude された DOM にはウィジェットのローカル変数が見えてしまうため、
     transclude される側でデータバインドしたいプロパティが上書きされてしまう可能性があります。
     上記の例では、ウィジェットの `title` プロパティは、transclude の `title` 
     プロパティを破壊しています。

独立性の問題を解決するためには、ディレクティブで新しい '隔離された' スコープを宣言します。
隔離されたスコープは子要素からプロトタイプ継承を行わないので、
プロパティを意図せず破壊する心配がなくなります。

しかしながら、 '隔離された' スコープは新たな問題のもとになります。
もし、 transclude された DOM がウィジェットの隔離されたスコープの子であれば、
なにもバインドすることができません。
このような理由から、 ローカル変数のための隔離されたスコープをウィジェットが生成するまでは、
transclude されたスコープはオリジナルのスコープの子なのです。

これは思ったより複雑かもしれませんが、
ウィジェットのユーザと開発者がぶつかる問題を最小限にすることができます。

したがって、ディレクティブの定義は下記のようになります。

<pre>
transclude: true,
scope: {
    title: '@',             // title は親スコープにデータバインドする
    onOk: '&',              // onOk 関数の delegate を作成する
    onCancel: '&',          // onCancel 関数の delegate を作成する
    visible: '='            // visible 属性でデータバインドが使えるようにする
},
restrict: 'E',
replace: true
</pre>

# コンポーネントの作成

複雑な DOM 構造を単一のディレクティブに置き換えたい場合はよくあります。
こうすれば、ディレクティブを使って、
再利用可能なコンポーネントを簡単に呼び出してアプリケーションを構築することができます。

下記は、再利用可能なウィジェットを作成する例です。

<doc:example module="zippyModule">
  <doc:source>
   <script>
     function Ctrl3($scope) {
       $scope.title = 'Lorem Ipsum';
       $scope.text = 'Neque porro quisquam est qui dolorem ipsum quia dolor...';
     }

     angular.module('zippyModule', [])
       .directive('zippy', function(){
         return {
           restrict: 'C',
           // HTML で zippy ディレクティブを置き換える
           replace: true,
           transclude: true,
           scope: { title:'@zippyTitle' },
           template: '<div>' +
                       '<div class="title">{{title}}</div>' +
                       '<div class="body" ng-transclude></div>' +
                     '</div>',
           // リンク関数でテンプレートにふるまいを追加する
           link: function(scope, element, attrs) {
                 // タイトル要素
             var title = angular.element(element.children()[0]),
                 // Opened / closed の状態
                 opened = true;

             // タイトルをクリックすると、 zippy を開く/閉じる
             title.bind('click', toggle);

             // closed/opened 状態を切り替える
             function toggle() {
               opened = !opened;
               element.removeClass(opened ? 'closed' : 'opened');
               element.addClass(opened ? 'opened' : 'closed');
             }

             // zippy を初期化する
             toggle();
           }
         }
       });
   </script>
   <style>
     .zippy {
       border: 1px solid black;
       display: inline-block;
       width: 250px;
     }
     .zippy.opened > .title:before { content: '▼ '; }
     .zippy.opened > .body { display: block; }
     .zippy.closed > .title:before { content: '► '; }
     .zippy.closed > .body { display: none; }
     .zippy > .title {
       background-color: black;
       color: white;
       padding: .1em .3em;
       cursor: pointer;
     }
     .zippy > .body {
       padding: .1em .3em;
     }
   </style>
   <div ng-controller="Ctrl3">
     Title: <input ng-model="title"> <br>
     Text: <textarea ng-model="text"></textarea>
     <hr>
     <div class="zippy" zippy-title="Details: {{title}}...">{{text}}</div>
   </div>
  </doc:source>
  <doc:scenario>
    it('should bind and open / close', function() {
      input('title').enter('TITLE');
      input('text').enter('TEXT');
      expect(element('.title').text()).toEqual('Details: TITLE...');
      expect(binding('text')).toEqual('TEXT');

      expect(element('.zippy').prop('className')).toMatch(/closed/);
      element('.zippy > .title').click();
      expect(element('.zippy').prop('className')).toMatch(/opened/);
    });
  </doc:scenario>
</doc:example>
