@ngdoc overview
@name Developer Guide: Internet Explorer との互換性
@description

# 概要

このドキュメントでは、 HTML のカスタム属性やカスタムタグを扱うときの、 
Internet Explorer(IE) 特有の注意点について解説します。
もし、 IE 8.0 以前のバージョンで Angular アプリケーションを動作させようとしているならば、
このドキュメントに目を通してください。


# ショートバージョン

Angular アプリケーションを IE で動作させるためには、下記の点に注意してください。

  1. 必要に応じて (IE7 では必要) JSON.stringify を polyfill します。
     [JSON2](https://github.com/douglascrockford/JSON-js) または、
     [JSON3](http://bestiejs.github.com/json3/) polyfill が利用できます。

  2. `<ng:view>` のようなカスタム要素タグを **使用しないでください。** 
     (代わりに、 `<div ng-view>` のような属性を使用してください)

  3. **もし、カスタム要素タグを使用する場合は、** IE 向けに下記のステップに従ってください。

<pre>
  <html xmlns:ng="http://angularjs.org">
    <head>
      <!--[if lte IE 8]>
        <script>
          document.createElement('ng-include');
          document.createElement('ng-pluralize');
          document.createElement('ng-view');

          // オプション: CSS セレクタでタグを選択できるようにするために必要
          document.createElement('ng:include');
          document.createElement('ng:pluralize');
          document.createElement('ng:view');
        </script>
      <![endif]-->
    </head>
    <body>
      ...
    </body>
  </html>
</pre>

**重要なポイント** :

  * `xmlns:ng` - *名前空間* - 使用するカスタムタグそれぞれに、名前空間が 1 つ必要です。

  * `document.createElement(タグ名)` - *カスタムタグ名の生成* - これは、
    古いバージョンのIEのために必要な記述ですので、コンディショナルコメントでロードする必要があります。
    名前空間を持たず、HTMLで定義されていないタグそれぞれを、前もって宣言することで、 
    IE でも動作するようになります。


# ロングバージョン

IE には、標準の HTML で定義されていない要素タグ名について、問題があります。
これらの問題は 3 つのカテゴリに分けることができ、それぞれ解決方法が異なります。

  * タグの名前が `my:` プレフィックスから始まる場合、 IE は XML 名前空間のものと考えるので、
    対応する名前空間定義 `<html xmlns:my="ignored">` が必要です。

  * 標準 HTML のタグではなく、タグの名前に `:` を含まない場合、
    `document.createElement('my-tag')` を使って事前に生成しておく必要があります。

  * カスタムタグを CSS セレクタを使ってスタイル付けする場合、 XML 名前空間であるかにかかわらず、
    `document.createElement('my-tag')` を使って事前に生成しておく必要があります。


## 良いニュース

これらの制約は、要素のタグ名のみに適用され、要素の属性名には適用されません。
したがって、 `<div my-tag your:tag></div>` のような記述は、 IE でも特別な対応は必要ありません。

## もし適切に対応しなければどうなるのか

標準の HTML にないタグ `mytag` (もしくは `my:tag` や `my-tag` でも結果は同じ) 
を含む HTML があったとします。

<pre>
  <html>
    <body>
      <mytag>some text</mytag>
    </body>
  </html>
</pre>

この HTML は本来次のような DOM にパースされるべきです。

<pre>
#document
  +- HTML
     +- BODY
        +- mytag
           +- #text: some text
</pre>

`BODY` 要素は子要素 `mytag` を持ち、 `mytag` 要素は `some text` 
というテキストを子要素として持っている、と解釈されるはずです。

しかし、先述の対応をしていなければ、 IE では次のようになってしまいます。

<pre>
#document
  +- HTML
     +- BODY
        +- mytag
        +- #text: some text
        +- /mytag
</pre>

IE では、 `BODY` 要素が次の 3 つの子要素を持っている状態に解釈されます。

  1. (終了タグが不要な、自動的に閉じられる) `mytag` 。
     自動的に閉じられるタグの例は `<br/>`で、タグ名末尾の `/` はオプションですが、 `<br>` 
     タグは子要素を持つことができません。
     ブラウザは `<br>some text</br>` を 3 つの兄弟要素として解釈し、 
     `<br>` 要素の中に子要素 `some text` があるようには解釈してくれません。

  2. `some text` を含むテキストノード。このテキストノードは本来 `mytag` の兄弟要素ではなく、
     子要素として解釈されるべきです。

  3. 自動的に閉じられる `/mytag` の破損した要素。要素名は `/` から始まってはいけないので、
     この要素は破損しているとみなされます。さらに、この `/mytag` 要素は 
     DOM の構造を示すためだけに使用されるべきなので、本来は DOM の 
     1 要素として解釈されるべきではありません。


## カスタムタグ名を CSS でスタイリングする

カスタム要素に対して CSS セレクタが動作するようにするためには、 
XML 名前空間にかかわらず、 `document.createElement('my-tag')` を使って、
カスタム要素名を事前に生成しておく必要があります。

<pre>
  <html xmlns:ng="needed for ng: namespace">
    <head>
      <!--[if lte IE 8]>
        <script>
          // ng-include が正常にパースされるために必要
          document.createElement('ng-include');

          // CSS で参照できるようにするために必要
          document.createElement('ng:view');
        </script>
      <![endif]-->
      <style>
        ng\\:view {
          display: block;
          border: 1px solid red;
        }

        ng-include {
          display: block;
          border: 1px solid blue;
        }
      </style>
    </head>
    <body>
      <ng:view></ng:view>
      <ng-include></ng-include>
      ...
    </body>
  </html>
</pre>



