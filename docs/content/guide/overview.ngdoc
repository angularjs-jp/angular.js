@ngdoc overview
@name Developer Guide: 概要
@description


# Angular とは

AngularJS は、動的 Web アプリケーションのためのフレームワークです。
Angular を使うことで、 HTML をテンプレート言語として使うことができ、
HTML の文法を拡張してアプリケーションのコンポーネントを明確かつ簡潔に表現することができます。
特に難しいことをしなくても AngularJS を使えば、あなたが現在書いている、
データバインディングや依存性注入のコードの大部分を取り除くことができます。
そして、それらの機能はすべてブラウザの Javascript の中で実現されるため、
どんなサーバサイドテクノロジとも共存できます。

もしも HTML がアプリケーションのために設計されていたら、 Angular 
のようになっていたでしょう。 
HTML は静的ドキュメントのための素晴らしい宣言型言語です。
しかし、アプリケーションを作ることを念頭に置かれていないので、
結果として、 Web アプリケーションを作るということは、 
*ブラウザをだまして、アプリケーションでやりたいことをやらせるにはどうしたらいいのか* 
ということに終始してしまいます。

動的なアプリケーションと静的なドキュメントと決定的な違いを埋めるためによく使われるのは、
下記の方法です。

  * **ライブラリ** - Web アプリケーションを書くために便利な関数の集合です。
    あなたのコードが主体となり、適切なときにライブラリを呼び出すようにコードを書く必要があります。
    例: jQuery

  * **フレームワーク** - Web アプリケーションの特定の実装方法にしたがって、
    詳細なコードを記述します。
    フレームワークが主体となり、アプリケーション特有の処理が必要になったら、
    あなたが記述したコードが呼び出されます。
    例: knockout, sproutcore など

Angular は、別のアプローチをとっています。
新たな HTML 構造を作ることにより、静的ドキュメント向けの HTML と 
Web アプリケーションとの不整合を最小限にすることを目指しています。 
Angular は directive と呼ばれる新しい HTML 構造の文法をブラウザに伝えます。
たとえば、下記のようなことを実現しています。

  * `{{}}` を使ったデータバインディング
  * DOM フラグメントを繰り返したり、隠すための DOM 制御構造
  * フォームとフォームのバリデーションのサポート
  * DOM 要素の裏で動作する code のアタッチ
  * HTML の集合を再利用可能なコンポーネントとして定義

## End-to-end ソリューション

Angular は Web アプリケーションを作るための 
end-to-end なソリューションを目指しています。
つまり、 Web アプリケーションを作るという巨大なパズルの 1 ピースではなく、
すべてが揃った完全な解を目指しているのです。
このようなことを目指しているので、
Angular は CRUD アプリケーションがどのように構築されるべきか、
頑なな方針を持っています。
しかし、この方針はあくまでスタート地点であり、簡単に変更できるようにもしています。
Angular は最初から下記の機能を搭載しています。

  * CRUD アプリケーションを作るために必要なすべて: データバインディング、
    基本的なテンプレート処理を提供するディレクティブ、フォームバリデーション、
    ルーティング、 deep-linking 、最利用可能なコンポーネント、依存性注入
  * テスト容易性: ユニットテスト、 End-to-End テスト、モック、テストハーネス
  * 開発を始めるときに使う、ディレクトリ構造とテストスクリプトが揃った、
    アプリケーションのひな形

## Angular が適しているアプリケーション

Angular は、開発者に見える部分を高度に抽象化することで、
アプリケーション開発を単純化しています。
ただし、他の抽象化と同じように、抽象化を行うことで柔軟性が失われます。
言い換えれば、必ずしもすべてのアプリケーションにとって 
Angular が適しているわけではないということです。
Angular は、CRUDアプリケーションを念頭に作られました。
幸い、Webアプリケーションの 90% は CRUD アプリケーションが占めています。
しかし、Angular が何に適しているかを理解するためには、 Angular 
が適していないケースを理解しなければなりません。

ゲームや GUI エディタは、複雑で手の込んだ DOM 操作を行うアプリケーションの良い例です。
これらの種類のアプリケーションは CRUD アプリケーションとは違い、
結果として Angular は適していません。このようなケースでは、
jQuery などの DOM 操作をあまり抽象化していないライブラリの方が適しているかもしれません。

# Angular サンプルの解説

次のサンプルは、入力フォームがある典型的な CRUD アプリケーションです。
入力フォームの値はバリデーションが行われ、合計を計算するために使用されます。
また、合計は特定のロケールにそってフォーマットされます。
このようなアプリケーションを作成するとき、
開発者はおおよそ次のような方法を考えるでしょう。

  * UI にデータモデルをアタッチする
  * ユーザの入力を読み取り、チェックして、出力する
  * データモデルから新しい値(合計値)を計算する
  * ユーザのロケールに合わせて数値をフォーマットして出力する

<example>
  <file name="script.js">
    function InvoiceCntl($scope) {
      $scope.qty = 1;
      $scope.cost = 19.95;
    }
  </file>
  <file name="index.html">
    <div ng-controller="InvoiceCntl">
      <b>Invoice:</b>
      <br>
      <br>
      <table>
       <tr><td>Quantity</td><td>Cost</td></tr>
       <tr>
         <td><input type="integer" min="0" ng-model="qty" required ></td>
         <td><input type="number" ng-model="cost" required ></td>
       </tr>
      </table>
      <hr>
      <b>Total:</b> {{qty * cost | currency}}
    </div>
  </file>
  <file name="scenario.js">
    it('should show of angular binding', function() {
      expect(binding('qty * cost')).toEqual('$19.95');
      input('qty').enter('2');
      input('cost').enter('5.00');
      expect(binding('qty * cost')).toEqual('$10.00');
    });
  </file>
</example>

上のライブプレビューを試してみたら、
サンプルコードの中で何が行われているか順にみていきましょう。

`<html>` タグでは、Angular のアプリケーションであることを、 `ng-app`
ディレクティブをつけることで明示しています。 `ng-app` ディレクティブは、
Angular に {@link bootstrap 自動的な初期化} を実行させます。


    <html ng-app>

Angular は `<script>` タグで読み込みます。

    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/?.?.?/angular.min.js"></script>

`<input>` タグの `ng-model` 属性から、 Angular は自動的に 2 
方向のデータバインディングを行います。
また、ここで簡単な入力チェックも行なっています。

    Quantity: <input type="integer" min="0" ng-model="qty" required >
    Cost: <input type="number" ng-model="cost" required >

これらの入力項目は十分自然に見えますが、次の 2 点がポイントです。

  * ページがロードされたとき、 Angular は入力項目の名前 (`qty` と
    `cost`) を同じ名前の変数にバインドします。これらの変数は
    Model-View-Controller デザインパターンの"Model" に相当すると考えて
    ください。
  * HTML の {@link api/ng.directive:input input} 
    要素は特別な機能があることに注意してください。
    無効なデータを入力したり、入力フィールドが空のとき、
    入力フィールドは赤色になって無効になります。
    このような機能を使うと、 
    CRUD アプリケーションによくある入力フィールドチェックを簡単に実装することができます。

最後に、謎めいた `{{ double curly braces }}` の部分を見てみましょう。

         Total: {{qty * cost | currency}}

この `{{ _expression_ }}` という表記法は、
データバインディングを行うための Angular のマークアップです。 
expression (式) は、別の `expression`や {@link dev_guide.templates.filters filter} 
の組み合わせの形を取れます ( `{{ expression | filter }}` の形です ) 。
Angular には、表示するデータをフォーマットするためのフィルタが用意されています。
 
上の例で、二重中括弧の中の式は、「入力項目から取得したデータを掛け合わせ、
その結果を金額としてフォーマットして表示する」ということを Angular に指示しています。

注目すべきは、このアプリケーションの振る舞いを実現するために、
Angular のメソッドを呼び出したり、
フレームワークにしたがってアプリケーション特有の振る舞いだけを実装したわけではない、
ということです。
ブラウザが、静的ドキュメントではなく、
動的 Web アプリケーションに適した振る舞いをしているので、
このようなアプリケーションの振る舞いを実現できているのです。 
Angular を使うことで、ライブラリやフレームワークを呼び出す必要がなくなり、
静的ドキュメント向けの HTML と Web 
アプリケーションとの不整合が軽減されたことがお分かりになったと思います。

# The Zen of Angular

Angular は、 UI を構築するときやソフトウェアのコンポーネント同士を結合するときには、
命令型のコードよりも宣言型のコードの方が適していて、
一方でビジネスロジックを記述するには命令型のコードが適している、
という信念に基づいて作られています。

  * DOM 操作をアプリケーションロジックから切り離すのは、非常に良い考えです。
    これによって、コードのテスタビリティが劇的に改善します。
  * アプリケーションのテストが、
    アプリケーションを書くことと同じくらい大切であると捉えるのは、
    実に重要なことです。
    また、アプリケーションがテストしにくいものになるかどうかは、
    コードの構造によって大きく左右されます。
  * アプリケーションのクライアントサイド処理と、
    サーバサイド処理を切り離すのは素晴らしい考えです。
    これによって、開発作業は同時に進めることができ、
    それぞれの処理を再利用することができるようになります。
  * UI の設計からビジネスロジックの記述・テストまでのアプリケーション構築手順を、
    フレームワークが開発者に示すことができれば、非常に便利です。
  * 共通のタスクを簡単なものにして、
    困難なタスクを可能なものにすることは、常にすばらしいことです。

Angular を使えば、次のような面倒から解放されます。

  * **コールバックの登録 :** 
    コールバックの登録を行うコードは、コード全体を散らかしてしまう原因になり、
    必要なコードを見つけるのが難しくなります。
    コールバックのような定型コードを取り除くのは良いことです。 
    _あなたが_ 書かなければならない JavaScript のコードの量を大幅に減らすことができ、
    アプリケーションが一体何をしているのか把握しやすくなります。

  * **プログラムによる HTML DOM 操作 :** 
    HTML DOM 操作は AJAX アプリケーションの基礎ですが、
    厄介で間違いのもとになります。アプリケーションの状態変化に合わせて、
    UIがどのように変化すべきかを宣言的に記述することで、
    低レベル DOM 操作のコードを書くタスクから解放されます。
    Angular で書かれたたいていのアプリケーションは、
    プログラムによって DOM 操作を行う必要がありませんが、
    もし必要ならば DOM 操作を行うコードを書くこともできます。

  * **UI とのデータの受け渡し :** 
    CRUD 操作は AJAX アプリケーションの大半を占めます。
    サーバからデータを受け取って内部オブジェクト・HTML フォームに渡して、
    ユーザがフォームを編集できるようにし、入力チェックエラーがあれば表示して、
    入力内容を内部のモデルに戻して、最後にまたサーバに送り返す、
    というような処理には、大量の定形コードが必要です。 
    Angular を使えば、このような定形コードをほぼすべて除去し、詳細な実装すべてを含むのではなく、
    アプリケーション全体の処理フローだけが書かれたコードを作成することができます。

  * **大量の初期化用コードの記述 :** 
    単純な "Hello World" AJAX アプリケーションを記述したいだけなのに、
    初期化を行うためのコードをたくさん書かなければならない、
    というのはよくあることです。 Angular では、
    service を使うことで簡単にアプリケーションの初期化をおこなうことができます。 
    service は Guice に似た依存性注入スタイルで、
    自動的にアプリケーションに読み込まれます。おまけに、
    自動テストを行うときには、初期化プロセスを完全にコントロールできます。

# Angular についてのプレゼンテーション

次の動画は、2012年に行われた、Angular に関するプレゼンテーションです。

<iframe width="560" height="315" src="http://www.youtube.com/embed/bfrn5VNpwsg" frameborder="0" allowfullscreen></iframe>
