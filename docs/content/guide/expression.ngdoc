@ngdoc overview
@name Developer Guide: Expression
@description

expression は、 JavaScript ライクなコードスニペットで、通常は `{{ expression }}` のように、
バインディングに含まれた形式で記述されます。
expression は {@link api/ng.$parse $parse} サービスによって処理されます。

たとえば、これらはすべて angular で有効な expression です。

  * `1+2`
  * `3*10 | currency`
  * `user.name`


## Angular の expression と JS の式

Angular のビューの expression と JavaScript の式は同じものと考えたほうがわかりやすいかもしれませんが、
Angular は expression を評価するときに JavaScript の `eval()` を使用しないので、
この考え方は完全な正解ではありません。
Angular の expression と JavaScript の式は、下記の相違点をのぞいて同等と考えることができます。

  * **プロパティの評価方法:** すべてのプロパティの評価はスコープに対して行われます。これに対して、
  	JavaScript の式はグローバル変数 `window` に対して行われます。

  * **寛容性:** expression の評価は undefined や null に寛容です。これに対して、 
  	JavaScript の式の評価中に undefined や null の値が発生すると、 
	`NullPointerException` が発生します。

  * **フロー制御ステートメントの禁止:** Angular の expression の中では、
  	条件分岐、ループ、例外のスローのいずれも使用することができません。

  * **フィルタ:** expression を評価した結果をフィルタチェーンに渡すことができます。
  	たとえば、 date オブジェクトをロケールにあった可読フォーマットに変換することができます。

一方で、もし任意の JavaScript のコードを実行したいなら、
そのときはコントローラのメソッドに実装して、そのメソッドを呼び出すべきです。
もし、 Angular の expression を JavaScript から `eval()` で評価したければ、
{@link api/ng.$rootScope.Scope#$eval `$eval()`} メソッドを使用してください。

## Example
<doc:example>
<doc:source>
 1+2={{1+2}}
</doc:source>
<doc:scenario>
 it('should calculate expression in binding', function() {
   expect(binding('1+2')).toEqual('3');
 });
</doc:scenario>
</doc:example>

次のサンプルで、様々な expression の評価を試すことができます。

<doc:example>
<doc:source>
 <script>
   function Cntl2($scope) {
     var exprs = $scope.exprs = [];
     $scope.expr = '3*10|currency';
     $scope.addExp = function(expr) {
        exprs.push(expr);
     };

     $scope.removeExp = function(index) {
       exprs.splice(index, 1);
     };
   }
 </script>
 <div ng-controller="Cntl2" class="expressions">
   Expression:
   <input type='text' ng-model="expr" size="80"/>
   <button ng-click="addExp(expr)">Evaluate</button>
   <ul>
    <li ng-repeat="expr in exprs">
      [ <a href="" ng-click="removeExp($index)">X</a> ]
      <tt>{{expr}}</tt> => <span ng-bind="$parent.$eval(expr)"></span>
     </li>
   </ul>
 </div>
</doc:source>
<doc:scenario>
 it('should allow user expression testing', function() {
    element('.expressions :button').click();
    var li = using('.expressions ul').repeater('li');
    expect(li.count()).toBe(1);
    expect(li.row(0)).toEqual(["3*10|currency", "$30.00"]);
 });
</doc:scenario>
</doc:example>


# プロパティの評価

すべてのプロパティの評価は、スコープに対して行われます。
JavaScript では、すべての名前はグローバルオブジェクト window 
のプロパティとしてデフォルトで評価されますが、
Angular の expression でグローバルオブジェクト `window` を参照するときは、
{@link api/ng.$window `$window`} を使用しなければなりません。
たとえば、 `window` に定義されている `alert()` を呼び出すときは、
expression では `$window.alert()` と記述しなければなりません。
ややこしいバグの原因になりうる、グローバルオブジェクトへの意図しないアクセスを防ぐために、
Angular ではわざとスコープに閉じてプロパティを評価しています。

<doc:example>
<doc:source>
 <script>
   function Cntl1($window, $scope){
     $scope.name = 'World';

     $scope.greet = function() {
       ($window.mockWindow || $window).alert('Hello ' + $scope.name);
     }
   }
 </script>
 <div class="example2" ng-controller="Cntl1">
   Name: <input ng-model="name" type="text"/>
   <button ng-click="greet()">Greet</button>
 </div>
</doc:source>
<doc:scenario>
 it('should calculate expression in binding', function() {
   var alertText;
   this.addFutureAction('set mock', function($window, $document, done) {
     $window.mockWindow = {
       alert: function(text){ alertText = text; }
     };
     done();
   });
   element(':button:contains(Greet)').click();
   expect(this.addFuture('alert text', function(done) {
     done(null, alertText);
   })).toBe('Hello World');
 });
</doc:scenario>
</doc:example>

## 寛容性

expression の評価は undefined と null に寛容です。
JavaScriptでは、 `a` がオブジェクトではないときに、 `a.b.c` を評価しようとすると、
例外が発生します。
汎用言語としてはこれでいいのですが、 expression の評価は主にデータバインディングのために使い、
多くの場合次のように記述します。

        {{a.b.c}}

もし `a` が undefined のとき (おそらくサーバのレスポンスを待っていて、すぐに定義される状態)、
例外を発生させるよりも、何も表示しないほうが便利です。
もし expression の評価が寛容でなければ、 `{{((a||{}).b||{}).c}}` 
のようなごちゃごちゃしたコードを書かなければなりません。

同様に、 `a.b.c()` のように、 undefined か null の関数を呼び出したときは、 undefined が返ります。

## フロー制御ステートメントの禁止

expression の中に、フロー制御ステートメントを書くことはできません。
理由は、アプリケーションロジックはビューではなくコントローラに記述するべきである、という 
Angular の哲学の根本にあります。
ビューの expression で条件分岐、ループ、例外のスローを行う必要があれば、 
JavaScript のメソッドに委任します。


## フィルタ

データをユーザに表示するとき、
生のフォーマットからユーザフレンドリーなフォーマットに変換しなければならないこともあるでしょう。
たとえば、あるデータオブジェクトをユーザに表示するまえに、
ロケールにしたがってフォーマットしなければならないことがあります。
次のように、 expression はフィルタチェーンに渡すことができます。

       name | uppercase

expression が評価されると、 name の値は単純に {@link api/ng.filter:uppercase `uppercase`} 
フィルタに渡されます。

フィルタをつなぐ場合は、次の記法を使います。

       value | filter1 | filter2

フィルタには、コロンで区切った引数を渡すことができ、たとえば、 123 
という数値を小数点以下第 2 位まで表示するには、次のように記述します。

       123 | number:2

# $

$ プレフィックスは何を意味するのか疑問に思われているかもしれません。
$ は Angular がその API 名を他と区別するために使用する単なるプレフィックスです。
もし Angular が $ プレフィックスを使っていなければ、
`a.length()` を評価するとき、 `a` も Angular もそのようなプロパティを定義していないので、
評価結果は undefined になってしまいます。

Angular の将来のバージョンで length メソッドを追加するかもしれないということを考えると、
上記の expression の振る舞いは変わってしまうかもしれません。
さらに良くないのは、あなた方開発者が length というプロパティを作るかもしれず、
そのときは名前が衝突してしまうということです。
このような問題は、 Angular が既存のオブジェクトに追加の振る舞いを補完することに起因します。
追加の振る舞いには $ プレフィックスをもたせることで、名前空間を予約し、 
Angular の開発者と Angular を使用する開発者が衝突なく調和して開発できるようにしています。

