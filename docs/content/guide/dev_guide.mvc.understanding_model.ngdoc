@ngdoc overview
@name Developer Guide: Angular の MVC について : モデルコンポーネントを理解する
@description

Angular ドキュメントでは、_モデル_ という言葉は文脈によって、 
1 つのエンティティを表現する単一のオブジェクト
(例えば、複数の phone の配列を値に持つ "phones" というモデル) を指す場合と、
アプリケーションの全データモデル (すべてのエンティティ) を指す場合があります。

Angular では、モデルとは Angular の {@link scope スコープ} 
オブジェクトから到達可能なあらゆるデータのことです。
プロパティの名前はモデルの識別子であり、プロパティの値は何らかの JavaScript のオブジェクト 
(配列とプリミティブ型を含む)です。

JavaScript のオブジェクトが Angular のモデルになるための唯一の条件は、
そのオブジェクトが Angular スコープオブジェクトのプロパティとして、
スコープから参照できることだけです。
このようなプロパティへの参照は明示的に作成することもでき、暗黙的に作成されることもあります。

下記のように、JavaScript オブジェクトを参照するスコーププロパティを明示的に作成することで、
モデルを作成することができます。

* JavaScript のコードでスコープオブジェクトのプロパティに直接代入する
  (主にコントローラで使われる方法)

  <pre>
         function MyCtrl($scope) {
             // MyCtrlのスコープに'foo'というプロパティを作成し、
             // 初期値'bar'を代入する
             $scope.foo = 'bar';
         }
  </pre>

* テンプレートで、代入演算子を含む {@link expression Angular の expression} を使う

  <pre>
         <button ng-click="{{foos='ball'}}">Click me</button>
  </pre>

* テンプレートで、 {@link api/ng.directive:ngInit ngInit ディレクティブ} を使う
  (サンプルアプリケーションのみで使ってください。
  実際のアプリケーションではおすすめしません。)

  <pre>
         <body ng-init=" foo = 'bar' ">
  </pre>

次のようなテンプレート構造を処理するとき、 Angular はモデルを暗黙的に作成します。
(スコープのプロパティを作成し、適切な値を代入します。)

* input, select, textarea や他のフォーム要素

  <pre>
         <input ng-model="query" value="fluffy cloud">
  </pre>

  上記のコードはカレントスコープに "query" というモデルを作成し、その値を "fluffy cloud"
  にセットします。

* {@link api/ng.directive:ngRepeat ngRepeat} におけるイテレータの宣言

  <pre>
         <p ng-repeat="phone in phones"></p>
  </pre>

  上記のコードは "phones" 配列のそれぞれの要素に対して 1 つずつ子スコープを作成し、
  子スコープ に "phone" オブジェクト (モデル) を作成して、
  その値を配列内の "phone" の値にセットします。

Angular では、 JavaScript オブジェクトは下記の場合にモデルではなくなります。

* オブジェクトを参照するプロパティを持つ Angular スコープがなくなった場合

* オブジェクトを参照するプロパティを持つすべての Angular スコープが古くなり(使用されなくなり)、
  ガベージコレクションの対象になった場合

以下の図は、単純なテンプレートをもとにモデルが暗黙的に作成される様子を示しています。

<img src="img/guide/about_model_final.png">


## 関連トピック

* {@link dev_guide.mvc Angular における MVC について}
* {@link dev_guide.mvc.understanding_controller コントローラコンポーネントを理解する}
* {@link dev_guide.mvc.understanding_view ビューコンポーネントを理解する}
